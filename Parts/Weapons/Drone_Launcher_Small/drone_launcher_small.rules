Part : <./data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/DroneLauncherSmall"
	IconNameKey = "Parts/DroneLauncherSmallIcon"
	ID = janiTNT.drone_launcher_small // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	//OtherIDs = [missile_launcher]
	EditorGroup = "WeaponsProjectile"
	DescriptionKey = "Parts/DroneLauncherSmallDesc"
	Resources
	[
		[steel, 60]
		[coil2, 20]
		[processor, 3]
	]
	Size = [2, 4]
	PhysicalRect = [0, 1, 2, 3]
	RectColliderRectType = Normal
	SaveRect = &PhysicalRect
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 6000
	TypeCategories = [weapon, uses_steel, uses_sulfur, uses_launcher_parts, uses_ammo, is_crewed, drones]
	//ReceivableBuffs : ^/0/ReceivableBuffs [Factory]
	ReceivableBuffs : ^/0/ReceivableBuffs []
	ProhibitAbove = 2
	AllowedDoorLocations
	[
		[-1, 2]
		[2, 2]
	]
	ForceManhattanPathInPart = true
	BlockedTravelCellDirections
	[
		{
			Key = [0, 3]
			Value = [Right]
		}
		{
			Key = [1, 3]
			Value = [Left]
		}
	]
	ExternalWallsByCell
	[
		{
			Key = [0, 1]
			Value = [TopLeft, Bottom, BottomLeft, Left]
		}
		{
			Key = [1, 1]
			Value = [TopRight, Right, BottomRight, Bottom]
		}
	]
	InternalWallsByCell
	[
		{
			Key = [0, 0]
			Value = [Left, TopLeft, Top, TopRight]
		}
		{
			Key = [1, 0]
			Value = [Right, TopRight, Top, TopLeft]
		}
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [40, 90]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, PartCrew]
			Mode = All
		}
		
		IsOperatedByAI__Jani //Aephiex Code with zero interference.
		{
			Type = BuffToggle
			BuffType = AephiexAITerminal
			MinBuffValue = &~/Part/Components/PartCrew/Crew
		}
		
		AiGraphics
		{
			Type = Graphics
			Location = [1, 3.5]
			OperationalToggle = IsOperatedByAI__Jani
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "AIcore.png"
						Size = [2, 1]
					}
				]
			}
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 6
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		DroneType
		{
			Type = UIToggle
			ToggleID = "smalldronetype"
			Default = 0
			AlwaysAllowInBuildMode = true
		}

		LaserToggle
		{
			Type = ModeToggle
			Mode = DroneType
			OnMode = 0
		}
		LaserComponents
		{
			Type = ToggledComponents
			Toggle = LaserToggle
			IncludeInBlueprints = true
			Components = &<laser.rules>/Components
		}

		CannonToggle
		{
			Type = ModeToggle
			Mode = DroneType
			OnMode = 1
		}
		CannonComponents
		{
			Type = ToggledComponents
			Toggle = CannonToggle
			IncludeInBlueprints = true
			Components = &<cannon.rules>/Components
		}
		
		EletroCannonToggle
		{
			Type = ModeToggle
			Mode = DroneType
			OnMode = 2
		}
		EletroCannonComponents
		{
			Type = ToggledComponents
			Toggle = EletroCannonToggle
			IncludeInBlueprints = true
			Components = &<eletrocannon.rules>/Components
		}
		
		BuildConverterProxy
		{
			Type = ToggleProxy
			ComponentID = BuildConverter
		}
		
		BuildingGraphics
		{
			Type = Graphics
			Location = [1, 1.5]
			OperationalToggle = BuildConverterProxy
			AnimationToggle = BuildConverterProxy
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"build1.png"
							"build2.png"
							"build3.png"
							"build4.png"
							"build5.png"
							"build6.png"
							"build7.png"
							"build8.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.15
						AnimationStartTime = Zero
					}
				]
			}
		}
		
		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 8000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
		}
		BatterySprites
		{
			Type = ResourceSprites
			Location = [1, 3.5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_low"
			RangeLow = 0
			RangeHigh = 4000
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [2, 1]
				}
				{
					File = "batteries2.png"
					Size = [2, 1]
				}
			]
		}	
		
		SteelStorage
		{
			Type = ResourceStorage
			ResourceType = steel
			MaxResources = (&<./data/resources/steel/steel.rules>/MaxStackSize)
			ToggleOnResources = (&<./data/resources/steel/steel.rules>/MaxStackSize)
			ToggleOffResources = (&<./data/resources/steel/steel.rules>/MaxStackSize) - 1
			DelayBeforeReadyToUse = .5
			UITileRect = [.5 + 7/64, 1 + 7/64, 1 - 14/64, 1 - 14/64]
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/MissileLoad
			DropResourcesWhenDestroyed = true
			DropResourcesWhenRemoved = true
		}
		
		Consumer
		{
			Type = ResourceConsumer
			ResourceType = steel
			Storage = SteelStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			OperationalToggle = PowerToggle
			ConsumptionToggleButtonOffset = [0, -.4]
		}
		
		SteelProgressBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = SteelStorage
			LowColor = [128, 128, 128]
			HighColor = [128, 128, 128]
			FullColor = [164, 164, 164]
			Height = 15
		}

		CrewLocation1
		{
			Type = CrewLocation
			Location = [.55, 3.43]
			Rotation = -135d
		}
		CrewLocation2
		{
			Type = CrewLocation
			Location = [1.45, 3.43]
			Rotation = 135d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 2
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			//HighPriorityPrerequisites = [MissilesPrereqProxy]
			CrewDestinations
			[
				[ .55, 3.44]
				[1.45, 3.44]
			]
			CrewLocations
			[
				CrewLocation1
				CrewLocation2
			]
		}

		Graphics
		{
			Type = Graphics
			Location = [1, 2]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				Offset = [0, 1]
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [2, 2]
					}
				]
			}
			OperationalDoodad = &<./data/ships/terran/missile_launcher/missile_launcher.rules>/Part/Components/Graphics/OperationalDoodad
			OperationalLighting = &<./data/ships/terran/missile_launcher/missile_launcher.rules>/Part/Components/Graphics/OperationalLighting
			NonOperationalDoodad = &<./data/ships/terran/missile_launcher/missile_launcher.rules>/Part/Components/Graphics/NonOperationalDoodad
			Walls = &<./data/ships/terran/missile_launcher/missile_launcher.rules>/Part/Components/Graphics/Walls
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [2, 4]
					}
				]
			}
			OperationalRoofDoodad = &<./data/ships/terran/missile_launcher/missile_launcher.rules>/Part/Components/Graphics/OperationalRoofDoodad
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				Offset = [-0.5, 1.17]
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [3, 3]
						Z = 0.5 // Controls the "height" of the light for the purposes of normal mapping. Set to -1 (or any negative number) to disable normal lighting for this light.
						VertexColor = [255*1.1, 0, 0]
					}
				]
			}
		}
		External_Walls_Graphics
		{
			Type = Graphics
			Location = [1, 1]
			OperationalToggle = IsOperational
			Walls = &<./data/ships/terran/missile_launcher/nuke/missile_launcher_nuke.rules>/Components/External_Walls_Graphics/Walls
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				Offset = [0.5, 2.17]
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [3, 3]
						Z = 0.5 // Controls the "height" of the light for the purposes of normal mapping. Set to -1 (or any negative number) to disable normal lighting for this light.
						VertexColor = [255*1.1, 0, 0]
					}
				]
			}
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [1, 2]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}
		
		BlueprintsLaser
		{
			Type = BlueprintSprite
			File = "blueprint1.png"
			Size = [2, 5]
			Offset = [0, -.5]

			ShowOnlyInToggleMode
			{
				ToggleID = smalldronetype
				Mode = 0
			}
		}
		BlueprintsCannon
		{
			Type = BlueprintSprite
			File = "blueprint2.png"
			Size = [2, 5]
			Offset = [0, -.5]

			ShowOnlyInToggleMode
			{
				ToggleID = smalldronetype
				Mode = 1
			}
		}
		BlueprintsEletroCannon
		{
			Type = BlueprintSprite
			File = "blueprint3.png"
			Size = [2, 5]
			Offset = [0, -.5]

			ShowOnlyInToggleMode
			{
				ToggleID = smalldronetype
				Mode = 2
			}
		}

		/*BlueprintsNuke
		{
			Type = BlueprintSprite
			File = "./data/ships/terran/missile_launcher/blueprints_nuke.png"
			Size = [2, 5]
			Offset = [0, -.5]

			ShowOnlyInToggleMode
			{
				ToggleID = missile_type
				Mode = 2
			}
		}*/
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		
		SteelCapacity = 12		
		RecPower = 0.6
		RecCrew = (&CrewRequired) + (&RecPower) + 0.16 * 1.2 * 4
		//RecCrew = (&CrewRequired) + (&<he/missile_launcher_he.rules>/MissileStats/Stats/ROF) * (&<he/missile_launcher_he.rules>/MissileStats/Stats/MissileParts) * 4
		//RecCrew = (&CrewRequired) + 0.16 * 1.2 * 4
	}

	StatsNotesKey = "Stats/DroneLauncherNotes"
}