//Somewhat Based On GA's Fighter weapons, which is in fact Inspired by Kroom's forge Fighter weapons
//It was perfect for FTL styled weapons waaa
//Some IDs are the same in order to ensure compatibility for things such as blocking eachother.
Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/FTL_spetumbeam"
	IconNameKey = "Parts/FTL_spetumbeamIcon"
	ID = janiTNT.FTL_mini_beam // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	EditorGroups = ["WeaponsEnergy"]
	DescriptionKey = "Parts/FTL_spetumbeamDesc"
	Resources
	[
		[steel, 8]
		[coil, 8]
	]
	Size = [1, 1]
	MaxHealth = 1000
	TypeCategories = [uses_power, weapon]
	IsFlippable = true
	ReceivableBuffs : ^/0/ReceivableBuffs []
	ForceManhattanPathInPart = true
	ProhibitedBy : ^/0/ProhibitedBy [fighter]
	ProhibitRects
	[
		[fighter, [0, -1, 1, 1]]// TO ENSURE COMPATIBILITY, Shorter
	]
	AllowedDoorLocations
	[
		[-1, 0]
		[1, 0]
		[0, 1]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [32, 64]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage]
			Mode = All
		}
		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}
		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 1
		}
		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 4000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
		}
		
		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}
		
		SliderValueTween
		{
			Type = ValueTween
			OnTweenDuration = 0.25
			OffTweenDuration = 0.5
			IsOnToggle = IsOperational
		}
		
		TurretSlider
		{
			Type = TransformLerp
			ValueFrom = SliderValueTween
			//StartLocation = [0, 0.125]
			StartLocation = [0, 0.25]
			EndLocation = [0, 0]
		}
		
		Collider
		{
			Type = CircleCollider
			Location = [.5, -0.4]
			Radius = .2
			ChainedTo = TurretSlider // Evil
			IncludeWhenUnderConstruction = false //Evil 2
		}
		
		Turret
		{
			Type = TurretWeapon
			Location = [.5, -0.4] // Slightly higher.
			Rotation = -90d// Relative to unrotated part.
			ChainedTo = TurretSlider // Evil
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = 4
			FiringArc = 20d
			RotateSpeed = 30d//slow
			FireThresholdAngle = 1d
			AIFirepowerRating = 270
			Emitter = BeamEmitter
			FirePermissionToggle = FireModeToggle
			HoldTargetAfterCancel = &../BeamEmitter/FireDelay
			AutoTargetCrewSafetyDist = 8

			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}

		ReloadProgressBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = Turret
		}
		
		BeamEmitter : <spetumbeam.rules>
		{
			Type = BeamEmitter
			ChainedTo = Turret
			Location = [0.3, 0]
			FireTrigger = Turret
			GetTargetFrom = Turret
			//OperationalToggle = IsOperational // allows to fire if no power when last fire
			Duration = 1
			ResourceStorage = BatteryStorage
			ResourcesUsed = 1250
			FireDelay = .25
			MinResourcesUsed = 1
			
			//EffectsScaleFactor = BeamEffectsScale

			BeamMediaEffects : ^/0/BeamMediaEffects
			[
				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "./Data/shots/ion_beam/ion_beam_emit.wav"
					Volume = 1 * 6
					Speed = 1.8
					MaxConcurrent = 1
					MaxConcurrentVolume = 1
					RampUpTime = .25
					RampDownTime = .25
				}
			]
		}
	
		/*ChargeToggle
		{
			Type = TriggeredToggle
			OnTrigger = Turret
			OffTrigger = BeamEmitter
		}*/
		
		TurretGraphics
		{
			Type = Graphics
			ChainedTo = Turret
			Location = [0.05, 0]
			Rotation = 90d
			OperationalToggle = IsOperational
			DoodadToggle = BeamEmitter
			ToggleOffDoodad
			{
				Layer = "FTLlowturrets"
				DamageLevels
				[
					{
						File = "weapon_fire1.png"
						NormalsFile = "weapon_n.png"
						Size = [1, 1]
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "FTLlowturrets"
				DamageLevels
				[
					{
						File = "weapon_off.png"
						NormalsFile = "weapon_n.png"
						Size = [1, 1]
					}
				]
			}
		}

		ShootSprite
		{
			Type = Sprite
			ChainedTo = Turret
			Location = [0.05, 0]
			Rotation = 90d
			Layer = "FTLlowturrets"
			ResetAnimationTrigger = BeamEmitter
			OperationalToggle = BeamEmitter
			AtlasSprite
			{
				AnimationFiles
				[
					"weapon_fire1.png"
					"weapon_fire2.png"
					"weapon_fire3.png"
					"weapon_fire4.png"
					"weapon_off.png"// stay dead
				]
				NormalsAnimationFiles
				[
					"weapon_n.png"
					"weapon_n.png"
					"weapon_n.png"
					"weapon_n.png"
					"weapon_n.png"
				]
				Size = [1, 1]
				AnimationInterval = 0.15
				AnimationStartTime = MinValue
				ClampAnimation = true
			}
		}
		
		TurretHolder
		{
			Type = Sprite
			Location = [.5, -.5]
			Layer = "structure"
			ChainedTo = TurretSlider // Evil
			AtlasSprite
			{
				File = "../base/basicmount.png"
				NormalsFile = "../base/basicmount_n.png"
				Size = [1, 1]
			}
		}
		
		Graphics
		{
			Type = Graphics
			Location = [.5, .5]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "../base/1x1_floor.png"
						Size = [1, 1]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"../base/top_doodads_on1.png"
							"../base/top_doodads_on2.png"
							"../base/top_doodads_on3.png"
							"../base/top_doodads_on4.png"
							"../base/top_doodads_on5.png"
							"../base/top_doodads_on6.png"
							"../base/top_doodads_on7.png"
							"../base/top_doodads_on8.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.1
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "../base/top_doodads_off.png"
						Size = [1, 1]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "../base/1x1_lights.png"
						Size = [1, 1]
						VertexColor = [255, 25, 25]//Beams
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "../base/1x1_walls.png"
						Size = [1, 1]
					}
				]
			}
			/*WallsStencil
			{
				Layer = "walls_stencil"
				Offset = [0, -1]
				DamageLevels
				[
					{
						File = "../base/basicmount_stencil.png"
						Size = [1, 1]
					}
				]
			}*/
			OperationalRoofDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"../base/bottom_doodads_on1.png"
							"../base/bottom_doodads_on2.png"
							"../base/bottom_doodads_on3.png"
							"../base/bottom_doodads_on4.png"
							"../base/bottom_doodads_on5.png"
							"../base/bottom_doodads_on6.png"
							"../base/bottom_doodads_on7.png"
							"../base/bottom_doodads_on8.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.1
					}
				]
			}
			NonOperationalRoofDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "../base/bottom_doodads_off.png"
						Size = [1, 1]
					}
				]
			}
			Roof = &<./Data/ships/terran/corridor/corridor.rules>/Part/Components/Graphics/Roof
		}
		
		Graphics2
		{
			Type = Graphics
			Location = [.5, .5]
			OperationalToggle = IsOperational
			OperationalDoodad
			{
				Layer = "doors"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"../base/top_cglows1.png"
							"../base/top_cglows2.png"
							"../base/top_cglows3.png"
							"../base/top_cglows4.png"
							"../base/top_cglows5.png"
							"../base/top_cglows6.png"
							"../base/top_cglows7.png"
							"../base/top_cglows8.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.12
						VertexColor = [255, 120, 120]//Beams
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "doors"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"../base/bottom_cglows1.png"
							"../base/bottom_cglows2.png"
							"../base/bottom_cglows3.png"
							"../base/bottom_cglows4.png"
							"../base/bottom_cglows5.png"
							"../base/bottom_cglows6.png"
							"../base/bottom_cglows7.png"
							"../base/bottom_cglows8.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.1
						VertexColor = [255, 120, 120]//Beams
					}
				]
			}
		}
		
		BatterySprites
		{
			Type = ResourceSprites
			Location = [.5, .5]
			ResourceStorage = BatteryStorage
			Layer = "walls" // below crew for reasons
			ResourceLevels
			[
				{
					File = "../base/batteries1.png"
					Size = [1, 1]
				}
				{
					File = "../base/batteries2.png"
					Size = [1, 1]
				}
				{
					File = "../base/batteries3.png"
					Size = [1, 1]
				}
				{
					File = "../base/batteries4.png"
					Size = [1, 1]
				}
				{
					File = "../base/batteries5.png"
					Size = [1, 1]
				}
				{
					File = "../base/batteries6.png"
					Size = [1, 1]
				}
			]
		}
		
		Indicators
		{
			Type = IndicatorSprites
			Location = [.5, .5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					Delay = &~/Part/Components/Turret/FireInterval
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}
		
		OperationEffects
		{
			Toggle = IsOperational
			Type = ToggleEffects
			Location = [.5, .5]
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/SmallPartDestroyed
			Location = [.5, .5]
		}
		
		Blueprints
		{
			Type = BlueprintSprite
			File = "../base/blueprint1x1.png"
			Size = [1, 1]
		}
	}

	Stats
	{
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = &../StatsByCategory/0/Stats/PowerPerSecond
		RecCrew = (&RecPower) * 4
	}

	StatsByCategory
	[
		{
			NameKey = "StatCategories/IonBeam"
			Stats
			{
				Damage = [(&~/Part/Components/BeamEmitter/HitOperational/HitEffects/0/Damage) * (&~/Part/Components/BeamEmitter/Duration) * (1 / (&~/Part/Components/BeamEmitter/HitInterval)) , ((&~/Part/Components/BeamEmitter/HitOperational/HitEffects/0/Damage) * (&~/Part/Components/BeamEmitter/Duration) * (1 / (&~/Part/Components/BeamEmitter/HitInterval))) * (1 / (&~/Part/Components/Turret/FireInterval)) ]
				BaseDamage = &~/Part/Components/BeamEmitter/HitOperational/HitEffects/0/Damage
				DamagePerShotNear = (&BaseDamage) * (&~/Part/Components/BeamEmitter/HitEffectsScaleOverRange/0)
				ROF = 1 / (&~/Part/Components/Turret/FireInterval)
				HitInterval = &~/Part/Components/BeamEmitter/HitInterval
				DamageContinuousNear = (&DamagePerShotNear) / (&HitInterval)
				Range = &~/Part/Components/BeamEmitter/Range
				Arc = deg(&~/Part/Components/Turret/FiringArc)
				ShotSpeed = Infinity
				PowerPerShot = (&~/Part/Components/BeamEmitter/ResourcesUsed) / 1000
				PowerPerSecond = (&PowerPerShot) / (&~/Part/Components/Turret/FireInterval)
				ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
			}
		}
	]
}