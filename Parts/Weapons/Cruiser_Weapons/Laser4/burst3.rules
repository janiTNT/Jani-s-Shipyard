//Somewhat Based On GA's Fighter weapons, which is in fact Inspired by Kroom's forge Fighter weapons
//It was perfect for FTL styled weapons waaa
//Some IDs are the same in order to ensure compatibility for things such as blocking eachother.
Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/FTL_burstlaser3"
	IconNameKey = "Parts/FTL_burstlaser3Icon"
	ID = janiTNT.FTL_burst_lasermk3 // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	EditorGroups = ["WeaponsEnergy"]
	DescriptionKey = "Parts/FTL_burstlaser3Desc"
	Resources
	[
		[steel, 96]
		[coil, 36]
	]
	Size = [2, 3]
	MaxHealth = 6000
	TypeCategories = [uses_power, weapon, is_crewed]
	IsFlippable = true
	ForceManhattanPathInPart = true
	ProhibitedBy : ^/0/ProhibitedBy [fighter]
	ReceivableBuffs : ^/0/ReceivableBuffs [ElectronBuff]
	ProhibitRects
	[
		[fighter, [0, -3, 2, 3]]// TO ENSURE COMPATIBILITY
	]
	AllowedDoorLocations
	[
		[-1, 1]
		[-1, 2]
		[2, 1]
		[2, 2]
		[0, 3]
		[1, 3]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [50*1.2, 100*1.2]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, PartCrew]
			Mode = All
		}
		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}
		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 4
		}
		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 15000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
		}
		
		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}
		
		SliderValueTween
		{
			Type = ValueTween
			OnTweenDuration = 0.5
			OffTweenDuration = 1
			IsOnToggle = IsOperational
		}
		
		TurretSlider
		{
			Type = TransformLerp
			ValueFrom = SliderValueTween
			StartLocation = [0, 1]
			EndLocation = [0, 0]
		}
		
		Collider
		{
			Type = CircleCollider
			Location = [1, -0.75]
			Radius = .4
			ChainedTo = TurretSlider // Evil
			IncludeWhenUnderConstruction = false //Evil 2
		}
		
		Turret
		{
			Type = TurretWeapon
			Location = [1, -0.6] // Slightly higher.
			Rotation = -90d// Relative to unrotated part.
			ChainedTo = TurretSlider // Evil
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = 8
			FiringArc = 20d
			RotateSpeed = 90d
			FireThresholdAngle = 1d
			AIFirepowerRating = 400
			Emitter = BulletEmitter
			FirePermissionToggle = FireModeToggle
			HoldTargetAfterCancel = &../BulletEmitter/FireDelay
			AutoTargetCrewSafetyDist = 8

			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}

		ReloadProgressBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = Turret
		}

		BulletEmitter
		{
			Type = BulletEmitter
			ChainedTo = Turret
			FireTrigger = Turret
			GetTargetFrom = Turret
			Location = [1.5, 0]
			OperationalToggle = IsOperational
			FireDelay = 1
			Bullet = &<burst3lasershot.rules>
			ResourceStorage = BatteryStorage
			ResourcesUsed = 1500
			MinResourcesUsed = 1
			
			Burst = 5
			BurstDelay = 0.2
			UseResourcePerShotInBurst = true
		}

		FireEffect
		{
			Type = TriggeredEffects
			ChainedTo = Turret
			Trigger = BulletEmitter
			Location = [1.5, 0]
			AnchorMediaEffects = true

			MediaEffects
			[
				&<./data/ships/terran/laser_blaster_large/particles/laser_blaster_large_shoot.rules>
				&<./data/ships/terran/laser_blaster_large/particles/laser_blaster_large_shoot_flash.rules>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "./data/ships/terran/laser_blaster_large/shoot.wav"
					Volume = 1
					Speed = 2
					SpeedVariation = .25
				}
			]
		}
		
		BurstDelay
		{
			Type = DelayTrigger
			Trigger = BulletEmitter
			Delay = .2 * 5
		}
		ChargeToggle
		{
			Type = TriggeredToggle
			OnTrigger = Turret
			OffTrigger = BurstDelay//burst kinda goes wack here xd
		}
		
		TurretGraphics
		{
			Type = Graphics
			ChainedTo = Turret
			Location = [-0.1, 0]
			Rotation = 90d
			OperationalToggle = IsOperational
			DoodadToggle = ChargeToggle
			ResetAnimationTrigger = BurstDelay
			ToggleOnDoodad
			{
				Layer = "FTLlowturrets"
				DamageLevels
				[
					{
						File = "weapon_ready.png"
						NormalsFile = "weapon_n.png"
						Size = [1, 2]
					}
				]
			}
			ToggleOffDoodad
			{
				Layer = "FTLlowturrets"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"weapon_off.png"
							"weapon_on1.png"
							"weapon_on2.png"
							"weapon_on3.png"
							"weapon_on4.png"
							"weapon_ready.png"
						]
						NormalsAnimationFiles
						[
							"weapon_n.png"
							"weapon_n.png"
							"weapon_n.png"
							"weapon_n.png"
							"weapon_n.png"
							"weapon_n.png"
						]
						Size = [1, 2]
						AnimationInterval = 4/6
						AnimationStartTime = WhenSpawned
						ClampAnimation = true
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "FTLlowturrets"
				DamageLevels
				[
					{
						File = "weapon_off.png"
						NormalsFile = "weapon_n.png"
						Size = [1, 2]
					}
				]
			}
		}

		BarrelSprite
		{
			Type = Sprite
			ChainedTo = Turret
			Location = [1.4, 0]
			Rotation = 90d
			Layer = "FTLlowturrets"
			ResetAnimationTrigger = BulletEmitter
			AtlasSprite
			{
				AnimationFiles
				[
					"weapon_fire2.png"
					"weapon_fire3.png"
					"weapon_fire4.png"
					"weapon_fire1.png"// Loop back to beginning and clamp there.
				]
				NormalsAnimationFiles
				[
					"weapon_fire_n2.png"
					"weapon_fire_n3.png"
					"weapon_fire_n4.png"
					"weapon_fire_n1.png"
				]
				Size = [1, 1]
				AnimationInterval = 0.05
				AnimationStartTime = MinValue
				ClampAnimation = true
			}
		}
		
		TurretHolder
		{
			Type = Sprite
			Location = [1, -.5]
			Layer = "structure"
			ChainedTo = TurretSlider // Evil
			AtlasSprite
			{
				File = "../base/Medmount.png"
				NormalsFile = "../base/Medmount_n.png"
				Size = [1, 1]
			}
		}
		
		Graphics
		{
			Type = Graphics
			Location = [1, 1.5]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "../base/3x2_floor.png"
						Size = [2, 3]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, -.5]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"../base/large_doodads_on1.png"
							"../base/large_doodads_on2.png"
							"../base/large_doodads_on3.png"
							"../base/large_doodads_on4.png"
							"../base/large_doodads_on5.png"
							"../base/large_doodads_on6.png"
							"../base/large_doodads_on7.png"
							"../base/large_doodads_on8.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.1
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, -.5]
				DamageLevels
				[
					{
						File = "../base/large_doodads_off.png"
						Size = [2, 2]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "../base/3x2_lights.png"
						Size = [2, 3]
						VertexColor = [255, 0, 0]//Lasers
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "../base/3x2_walls.png"
						Size = [2, 3]
					}
				]
			}
		}
		Graphics2
		{
			Type = Graphics
			Location = [1, 1.5]
			OperationalToggle = IsOperational
			OperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [.5, 1]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"../base/bottom_doodads_on1.png"
							"../base/bottom_doodads_on2.png"
							"../base/bottom_doodads_on3.png"
							"../base/bottom_doodads_on4.png"
							"../base/bottom_doodads_on5.png"
							"../base/bottom_doodads_on6.png"
							"../base/bottom_doodads_on7.png"
							"../base/bottom_doodads_on8.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.1
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [.5, 1]
				DamageLevels
				[
					{
						File = "../base/bottom_doodads_off.png"
						Size = [1, 1]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "doodads_low"
				Offset = [-.5, 1]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"../base/bottom_doodads_on1.png"
							"../base/bottom_doodads_on2.png"
							"../base/bottom_doodads_on3.png"
							"../base/bottom_doodads_on4.png"
							"../base/bottom_doodads_on5.png"
							"../base/bottom_doodads_on6.png"
							"../base/bottom_doodads_on7.png"
							"../base/bottom_doodads_on8.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.1
					}
				]
			}
			NonOperationalRoofDoodad
			{
				Layer = "doodads_low"
				Offset = [-.5, 1]
				DamageLevels
				[
					{
						File = "../base/bottom_doodads_off.png"
						Size = [1, 1]
					}
				]
			}
		}
		Graphics3
		{
			Type = Graphics
			Location = [1, 1.5]
			OperationalToggle = IsOperational
			OperationalDoodad
			{
				Offset = [0, -.5]
				Layer = "doors"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"../base/top_cglows1.png"
							"../base/top_cglows2.png"
							"../base/top_cglows3.png"
							"../base/top_cglows4.png"
							"../base/top_cglows5.png"
							"../base/top_cglows6.png"
							"../base/top_cglows7.png"
							"../base/top_cglows8.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.12
						VertexColor = [255, 90, 90]//Lasers
					}
				]
			}
			OperationalRoofDoodad
			{
				Offset = [-.5, 1]
				Layer = "doors"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"../base/bottom_cglows1.png"
							"../base/bottom_cglows2.png"
							"../base/bottom_cglows3.png"
							"../base/bottom_cglows4.png"
							"../base/bottom_cglows5.png"
							"../base/bottom_cglows6.png"
							"../base/bottom_cglows7.png"
							"../base/bottom_cglows8.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.1
						VertexColor = [255, 90, 90]//Lasers
					}
				]
			}
			OperationalLighting
			{
				Offset = [.5, 1]
				Layer = "doors"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"../base/bottom_cglows1.png"
							"../base/bottom_cglows2.png"
							"../base/bottom_cglows3.png"
							"../base/bottom_cglows4.png"
							"../base/bottom_cglows5.png"
							"../base/bottom_cglows6.png"
							"../base/bottom_cglows7.png"
							"../base/bottom_cglows8.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.1
						VertexColor = [255, 90, 90]//Lasers
					}
				]
			}
		}
		
		RoofGrid
		{
			Type = SpriteGrid
			Location = [.5, .5]
			//GridSpacing = [0.25, 0.25]
			GridSize = [2, 3]
			RandomDamageLevels
			[
				[
					{
						File = "./Data/ships/terran/corridor/roof.png"
						NormalsFile = "./Data/ships/terran/corridor/roof_normals.png"
						Size = [1, 1]
					}
					{
						File = "./Data/ships/terran/corridor/roof_33.png"
						NormalsFile = "./Data/ships/terran/corridor/roof_normals_33.png"
						Size = [1, 1]
					}
					{
						File = "./Data/ships/terran/corridor/roof_66.png"
						NormalsFile = "./Data/ships/terran/corridor/roof_normals_66.png"
						Size = [1, 1]
					}
				]
			]
			RandomUVRotation = true
			Layer = "roofs"
		}
		
		BatterySprites
		{
			Type = ResourceSprites
			Location = [.5, .5]
			ResourceStorage = BatteryStorage
			Layer = "walls" // below crew for reasons
			//RangeLow = 0
			//RangeHigh = 6000
			ResourceLevels
			[
				{
					File = "../base/large_batteries1.png"
					Size = [1, 1]
				}
				{
					File = "../base/large_batteries2.png"
					Size = [1, 1]
				}
				{
					File = "../base/large_batteries3.png"
					Size = [1, 1]
				}
				{
					File = "../base/large_batteries4.png"
					Size = [1, 1]
				}
				{
					File = "../base/large_batteries5.png"
					Size = [1, 1]
				}
				{
					File = "../base/large_batteries6.png"
					Size = [1, 1]
				}
				{
					File = "../base/large_batteries7.png"
					Size = [1, 1]
				}
				{
					File = "../base/large_batteries8.png"
					Size = [1, 1]
				}
				{
					File = "../base/large_batteries9.png"
					Size = [1, 1]
				}
			]
		}
		BatterySprites2
		{
			Type = ResourceSprites
			Location = [1.5, .5]
			ResourceStorage = BatteryStorage
			Layer = "walls" // below crew for reasons
			//RangeLow = 0
			//RangeHigh = 6000
			ResourceLevels
			[
				{
					File = "../base/large_batteries1.png"
					Size = [1, 1]
					MirrorU = true
				}
				{
					File = "../base/large_batteries2.png"
					Size = [1, 1]
					MirrorU = true
				}
				{
					File = "../base/large_batteries3.png"
					Size = [1, 1]
					MirrorU = true
				}
				{
					File = "../base/large_batteries4.png"
					Size = [1, 1]
					MirrorU = true
				}
				{
					File = "../base/large_batteries5.png"
					Size = [1, 1]
					MirrorU = true
				}
				{
					File = "../base/large_batteries6.png"
					Size = [1, 1]
					MirrorU = true
				}
				{
					File = "../base/large_batteries7.png"
					Size = [1, 1]
					MirrorU = true
				}
				{
					File = "../base/large_batteries8.png"
					Size = [1, 1]
					MirrorU = true
				}
				{
					File = "../base/large_batteries9.png"
					Size = [1, 1]
					MirrorU = true
				}
			]
		}
		
		CrewLocation1
		{
			Type = CrewLocation
			Location = [.5, 1.45]
		}
		CrewLocation2
		{
			Type = CrewLocation
			Location = [1.5, 1.45]
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 2
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			CrewDestinations
			[
				&../../CrewLocation1/Location
				&../../CrewLocation2/Location
			]
			CrewLocations
			[
				CrewLocation1
				CrewLocation2
			]
		}
		
		Indicators
		{
			Type = IndicatorSprites
			Location = [1, 1.5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					Delay = &~/Part/Components/Turret/FireInterval
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}
			]
		}
		
		OperationEffects
		{
			Toggle = IsOperational
			Type = ToggleEffects
			Location = [1, 1.5]
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/SmallPartDestroyed
			Location = [1, 1.5]
		}
		
		Blueprints
		{
			Type = BlueprintSprite
			File = "../base/blueprint2x1.png"
			Size = [2, 3]
		}
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = &../StatsByCategory/0/Stats/PowerPerSecond
		RecCrew = (&CrewRequired) + (&RecPower) * 4
	}

	StatsByCategory
	[
		{
			NameKey = "StatCategories/LaserBoltSmall"
			Stats
			{
				DamagePerShot = &~/Part/Components/BulletEmitter/Bullet/Components/Hit/HitOperational/HitEffects/0/TotalDamage/Basevalue
				DamagePerSecond = (&DamagePerShot) * (&ROF) * (&JaniBurstShots)
				Damage = [&../DamagePerShot, &../DamagePerSecond]
				ROF = 1 / (&~/Part/Components/Turret/FireInterval)
				JaniBurstShots = &~/Part/Components/BulletEmitter/Burst
				Range = &~/Part/Components/BulletEmitter/Bullet/Range
				Arc = deg(&~/Part/Components/Turret/FiringArc)
				TurretSpeed = deg(&~/Part/Components/Turret/RotateSpeed)
				ShotSpeed = &~/Part/Components/BulletEmitter/Bullet/Speed
				ShotHP = &~/Part/Components/BulletEmitter/Bullet/Components/Targetable/Health
				PowerPerShot = (&~/Part/Components/BulletEmitter/ResourcesUsed) / 1000
				PowerPerSecond = (&PowerPerShot) * (&ROF) * (&JaniBurstShots)
				ShotPowerUsage = [&../PowerPerShot, &../PowerPerSecond]
			}
		}
	]
}