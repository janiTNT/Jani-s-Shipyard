Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/DroneLauncherTiny"
	IconNameKey = "Parts/DroneLauncherTinyIcon"
	ID = janiTNT.drone_launcher_tiny // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	OtherIDs = [juanTNT.mini_drone_launcher]//heh.
	EditorGroup = "WeaponsProjectile"//EditorGroup = "JaniDrones"
	DescriptionKey = "Parts/DroneLauncherTinyDesc"
	Cost = 4000
	Resources
	[
		[steel, 20]//25 * 20 500
		[coil, 10]//100 * 10 1000
		[processor, 1]//2500
	]
	Size = [1, 2]
	PhysicalRect = [0, 1, 1, 1]
	RectColliderRectType = Normal
	SaveRect = &PhysicalRect
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 3000
	TypeCategories = [weapon, uses_power, uses_drones, uses_launcher_parts, is_crewed]
	//ReceivableBuffs = [Improve_Weapon_Range, AutoWeaponsEnable]
	ProhibitAbove = 2
	AllowedDoorLocations
	[
		[-1, 1]
		[1, 1]
	]
	ExternalWallsByCell
	[
		{
			Key = [0, 1]
			Value = [TopLeft, Bottom, BottomLeft, Left, BottomRight, Right, TopRight]
		}
	]
	InternalWallsByCell
	[
		{
			Key = [0, 0]
			Value = [Left, TopLeft, Top, TopRight, Right]
		}
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [32, 64]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, PartCrew]
			Mode = All
		}
		
		IsOperatedByAI__Jani //Aephiex Code with zero interference.
		{
			Type = BuffToggle
			BuffType = AephiexAITerminal
			MinBuffValue = &~/Part/Components/PartCrew/Crew
		}
		
		AiGraphics
		{
			Type = Graphics
			Location = [.5, 1.5]
			OperationalToggle = IsOperatedByAI__Jani
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "AIcore.png"
						Size = [1, 1]
					}
				]
			}
		}
		
		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 4
		}
		
		DroneType
		{
			Type = UIToggle
			ToggleID = "tinydronetype"
			Default = 0
			AvailableChoices = [0, 1, 3]
			AlwaysAllowInBuildMode = true
		}
		
		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}
		
		OneToggle
		{
			Type = ModeToggle
			Mode = DroneType
			OnMode = 0
		}
		OneComponents
		{
			Type = ToggledComponents
			Toggle = OneToggle
			IncludeInBlueprints = true
			Components
			{
				Mk1Storage
				{
					Type = ResourceStorage
					OperationalToggle = IsOperational
					ResourceType = fake
					MaxResources = 2
					DelayBeforeReadyToUse = 0.5
					//DropResourcesWhenDestroyed = true
					//DropResourcesWhenRemoved = true
					InitToMaxResources = 0
				}
				
				CanBuild
				{
					Type = MultiToggle
					Toggles
					[
						{Toggle = IsOperational}
						{Toggle = SteelReq}
						{Toggle = Mk1Storage, invert = true}
					]
					Mode = All
				}
				SteelReq
				{
					Type = MultiResourceStorage
					ResourceType = steel
					ResourceStorages = [SteelStorage]
					ToggleOnResources = 2
					ToggleOffResources = 1
				}
		
				BuildConverter
				{
					Type = ResourceConverter
					From
					[
						{
							Storage = BatteryStorage
							Quantity = 6
							MinQuantityForConversion = 1
						}
					]
					OperationalToggle = CanBuild
					ToStorage = BuildStorage
					ToQuantity = 1
					Interval = 6 / 16
				}
				
				BuildStorage
				{
					Type = ResourceStorage
					ResourceType = fake
					MaxResources = 16
					DelayBeforeReadyToUse = 0
					StartingResources = 0
					InitToMaxResources = 0
					InitToMaxResourcesPVP = 0
				}
				
				BuiltConverter
				{
					Type = ResourceConverter
					OperationalToggle = CanBuild
					From
					[
						{
							Storage = BuildStorage
							Quantity = 16
						}
						{
							Storage = SteelStorage
							Quantity = 2
						}
					]
					ToStorage = Mk1Storage
					ToQuantity = 2
					Interval = .15
				}
				ConvertEffects
				{
					Type = TriggeredEffects
					Trigger = BuiltConverter
					Location = [0.5, 0.5]
					MediaEffects = &/COMMON_EFFECTS/MissileLoad
				}
				
				Weapon
				{
					Type = TurretWeapon
					Location = [.5, .5]
					Rotation = -90d
					Emitter = Emitter
					OperationalToggle = IsOperational
					AutoFireToggle = AutoFireToggle
					FireInterval = 0
					FiringArc = 0d
					TargetingArc = 360d
					ValidArc = 360d
					FireThresholdAngle = (&TargetingArc) / 2
					RotateSpeed = 0d
					AllowFireWithBlockedLOS = true
					AIFirepowerRating = 1000
					FirePermissionToggle = FireModeToggle

					AutoTargets
					[
						{
							TargetType = ShipParts
							Toggle = AutoTargetToggle
							EnableInDirectControlMode = true
						}
					]

					CoverageSectorArc
					{
						Texture = &/INDICATORS/VerticalGradient
						VertexColor = [255, 255, 255, 51]
						QuadCount = 64
					}
				}

				ReloadProgressBar
				{
					Type = ProgressBar
					OperationalToggle = IsOperational
					ShowProgressFor = Weapon
				}

				Emitter
				{
					Type = BulletEmitter
					ChainedTo = Weapon
					OperationalToggle = IsOperational
					FireTrigger = Weapon
					GetTargetFrom = Weapon
					ResourceStorage = Mk1Storage
					ResourcesUsed = 2
					Bullet = &<projectiles/combat1/combat1.txt>
					TargetLeadPrediction = false
					Recoil = 15
				}

				LaunchEffect
				{
					Type = TriggeredEffects
					ChainedTo = Weapon
					Trigger = Weapon

					MediaEffects
					[
						: /BASE_SOUNDS/AudioExterior
						{
							Sound = "./Data/ships/terran/missile_launcher/shoot.wav"
							Speed = 1.0
							SpeedVariation = .1
						}
					]
				}
				
				DroneSprite
				{
					Type = ResourceSprites
					Location = [.5, .5]
					Rotation = -90d
					ResourceStorage = Mk1Storage
					Layer = "weapons"
					ResourceLevels
					[
						{
							File = "One1.png"
							NormalsFile = "One_n1.png"
							Size = [1, 1]
						}
					]
				}
				DroneBuildSprite
				{
					Type = ResourceSprites
					Location = [.5, .5]
					Rotation = -90d
					ResourceStorage = BuildStorage
					Layer = "drone_construction"
					ResourceLevels
					[
						{
							File = "Onemask.png"
							NormalsFile = "One_n1.png"
							Size = [1, 1]
							VertexColor = [0, 0, 0, 255]
						}
						: &0
						{VertexColor = [8, 8, 8, 255];}
						: &0
						{VertexColor = [16, 16, 16, 255];}
						: &0
						{VertexColor = [24, 24, 24, 255];}
						: &0
						{VertexColor = [32, 32, 32, 255];}
						: &0
						{VertexColor = [40, 40, 40, 255];}
						: &0
						{VertexColor = [48, 48, 48, 255];}
						: &0
						{VertexColor = [56, 56, 56, 255];}
						: &0
						{VertexColor = [64, 64, 64, 255];}
						: &0
						{VertexColor = [72, 72, 72, 255];}
						: &0
						{VertexColor = [80, 80, 80, 255];}
						: &0
						{VertexColor = [88, 88, 88, 255];}
						: &0
						{VertexColor = [96, 96, 96, 255];}
						: &0
						{VertexColor = [104, 104, 104, 255];}
						: &0
						{VertexColor = [112, 112, 112, 255];}
						: &0
						{VertexColor = [120, 120, 120, 255];}
						: &0
						{VertexColor = [128, 128, 128, 255];}
						: &0
						{VertexColor = [136, 136, 136, 255];}
						: &0
						{VertexColor = [144, 144, 144, 255];}
						: &0
						{VertexColor = [152, 152, 152, 255];}
						: &0
						{VertexColor = [160, 160, 160, 255];}
						: &0
						{VertexColor = [168, 168, 168, 255];}
						: &0
						{VertexColor = [176, 176, 176, 255];}
						: &0
						{VertexColor = [184, 184, 184, 255];}
						: &0
						{VertexColor = [192, 192, 192, 255];}
						: &0
						{VertexColor = [200, 200, 200, 255];}
						: &0
						{VertexColor = [208, 208, 208, 255];}
						: &0
						{VertexColor = [216, 216, 216, 255];}
						: &0
						{VertexColor = [224, 224, 224, 255];}
						: &0
						{VertexColor = [232, 232, 232, 255];}
						: &0
						{VertexColor = [240, 240, 240, 255];}
						: &0
						{VertexColor = [248, 248, 248, 255];}
						: &0
						{VertexColor = [256, 256, 256, 255] ;}
					]
				}
				HatchSprites
				{
					Type = ResourceSprites
					Location = [.5, 1.5]
					ResourceStorage = Mk1Storage
					Layer = "doodads_high"
					HasZeroResourceSprite = true
					ResourceLevels
					[
						{
							File = "hatch1.png"
							Size = [1, 1]
						}
						{
							File = "hatch3.png"
							Size = [1, 1]
						}
					]
				}
				
				Indicators
				{
					Type = IndicatorSprites
					Location = [.5, 1.25]
					Layer = "indicators"
					Indicators
					[
						// Turned off.
						{
							Toggle = PowerToggle
							AtlasSprite
							{
								File = &/INDICATORS/PowerOff
								Size = [1, 1]
							}
						}

						// Out of steel.
						{
							Toggle = SteelReq
							Delay = 6
							AtlasSprite
							{
								File = &/INDICATORS/NoResource
								Size = [1, 1]
							}
						}

						// No crew.
						{
							Toggle = PartCrew
							AtlasSprite
							{
								File = &/INDICATORS/NoCrew
								Size = [1, 1]
							}
						}
					]
				}
			}
		}
		
		TwoToggle
		{
			Type = ModeToggle
			Mode = DroneType
			OnMode = 1
		}
		TwoComponents
		{
			Type = ToggledComponents
			Toggle = TwoToggle
			IncludeInBlueprints = true
			Components
			{
				Mk2Storage
				{
					Type = ResourceStorage
					OperationalToggle = IsOperational
					ResourceType = fake
					MaxResources = 4
					DelayBeforeReadyToUse = 0.5
					//DropResourcesWhenDestroyed = true
					//DropResourcesWhenRemoved = true
					InitToMaxResources = 0
				}
				
				CanBuild
				{
					Type = MultiToggle
					Toggles
					[
						{Toggle = IsOperational}
						{Toggle = SteelReq}
						{Toggle = Mk2Storage, invert = true}
					]
					Mode = All
				}
				SteelReq
				{
					Type = MultiResourceStorage
					ResourceType = steel
					ResourceStorages = [SteelStorage]
					ToggleOnResources = 4
					ToggleOffResources = 3
				}
		
				BuildConverter
				{
					Type = ResourceConverter
					From
					[
						{
							Storage = BatteryStorage
							Quantity = 100
							MinQuantityForConversion = 1
						}
					]
					OperationalToggle = CanBuild
					ToStorage = BuildStorage
					ToQuantity = 1
					Interval = 8 / 16
				}
				
				BuildStorage
				{
					Type = ResourceStorage
					ResourceType = fake
					MaxResources = 16
					DelayBeforeReadyToUse = 0
					StartingResources = 0
					InitToMaxResources = 0
					InitToMaxResourcesPVP = 0
				}
				
				BuiltConverter
				{
					Type = ResourceConverter
					OperationalToggle = CanBuild
					From
					[
						{
							Storage = BuildStorage
							Quantity = 16
						}
						{
							Storage = SteelStorage
							Quantity = 4
						}
					]
					ToStorage = Mk2Storage
					ToQuantity = 4
					Interval = .15
				}
				ConvertEffects
				{
					Type = TriggeredEffects
					Trigger = BuiltConverter
					Location = [0.5, 0.5]
					MediaEffects = &/COMMON_EFFECTS/MissileLoad
				}
				
				Weapon
				{
					Type = TurretWeapon
					Location = [.5, .5]
					Rotation = -90d
					Emitter = Emitter
					OperationalToggle = IsOperational
					AutoFireToggle = AutoFireToggle
					FireInterval = 0
					FiringArc = 0d
					TargetingArc = 360d
					ValidArc = 360d
					FireThresholdAngle = (&TargetingArc) / 2
					RotateSpeed = 0d
					AllowFireWithBlockedLOS = true
					AIFirepowerRating = 2000
					FirePermissionToggle = FireModeToggle

					AutoTargets
					[
						{
							TargetType = ShipParts
							Toggle = AutoTargetToggle
							EnableInDirectControlMode = true
						}
					]

					CoverageSectorArc
					{
						Texture = &/INDICATORS/VerticalGradient
						VertexColor = [255, 255, 255, 51]
						QuadCount = 64
					}
				}

				ReloadProgressBar
				{
					Type = ProgressBar
					OperationalToggle = IsOperational
					ShowProgressFor = Weapon
				}

				Emitter
				{
					Type = BulletEmitter
					ChainedTo = Weapon
					OperationalToggle = IsOperational
					FireTrigger = Weapon
					GetTargetFrom = Weapon
					ResourceStorage = Mk2Storage
					ResourcesUsed = 4
					Bullet = &<projectiles/combat2/two1.rules>
					TargetLeadPrediction = false
					Recoil = 20
				}

				LaunchEffect
				{
					Type = TriggeredEffects
					ChainedTo = Weapon
					Trigger = Weapon

					MediaEffects
					[
						: /BASE_SOUNDS/AudioExterior
						{
							Sound = "./Data/ships/terran/missile_launcher/shoot.wav"
							Speed = 1.0
							SpeedVariation = .1
						}
					]
				}
				
				DroneSprite
				{
					Type = ResourceSprites
					Location = [.5, .5]
					Rotation = -90d
					ResourceStorage = Mk2Storage
					Layer = "weapons"
					ResourceLevels
					[
						{
							File = "Two2.png"
							NormalsFile = "Two_n2.png"
							Size = [1, 1]
						}
					]
				}
				/*DroneBuildSprite
				{
					Type = ResourceSprites
					Location = [.5, .5]
					Rotation = -90d
					ResourceStorage = BuildStorage
					Layer = "weapons"
					ResourceLevels
					[
						{
							File = "Two0.png"
							NormalsFile = "Two_n0.png"
							Size = [1, 1]
						}
						{
							File = "Two1.png"
							NormalsFile = "Two_n1.png"
							Size = [1, 1]
						}
					]
				}*/
				DroneBuildSprite
				{
					Type = ResourceSprites
					Location = [.5, .5]
					Rotation = -90d
					ResourceStorage = BuildStorage
					Layer = "drone_construction"
					ResourceLevels
					[
						{
							File = "Twomask.png"
							NormalsFile = "Two_n2.png"
							Size = [1, 1]
							VertexColor = [0, 0, 0, 255]
						}
						: &0
						{VertexColor = [8, 8, 8, 255];}
						: &0
						{VertexColor = [16, 16, 16, 255];}
						: &0
						{VertexColor = [24, 24, 24, 255];}
						: &0
						{VertexColor = [32, 32, 32, 255];}
						: &0
						{VertexColor = [40, 40, 40, 255];}
						: &0
						{VertexColor = [48, 48, 48, 255];}
						: &0
						{VertexColor = [56, 56, 56, 255];}
						: &0
						{VertexColor = [64, 64, 64, 255];}
						: &0
						{VertexColor = [72, 72, 72, 255];}
						: &0
						{VertexColor = [80, 80, 80, 255];}
						: &0
						{VertexColor = [88, 88, 88, 255];}
						: &0
						{VertexColor = [96, 96, 96, 255];}
						: &0
						{VertexColor = [104, 104, 104, 255];}
						: &0
						{VertexColor = [112, 112, 112, 255];}
						: &0
						{VertexColor = [120, 120, 120, 255];}
						: &0
						{VertexColor = [128, 128, 128, 255];}
						: &0
						{VertexColor = [136, 136, 136, 255];}
						: &0
						{VertexColor = [144, 144, 144, 255];}
						: &0
						{VertexColor = [152, 152, 152, 255];}
						: &0
						{VertexColor = [160, 160, 160, 255];}
						: &0
						{VertexColor = [168, 168, 168, 255];}
						: &0
						{VertexColor = [176, 176, 176, 255];}
						: &0
						{VertexColor = [184, 184, 184, 255];}
						: &0
						{VertexColor = [192, 192, 192, 255];}
						: &0
						{VertexColor = [200, 200, 200, 255];}
						: &0
						{VertexColor = [208, 208, 208, 255];}
						: &0
						{VertexColor = [216, 216, 216, 255];}
						: &0
						{VertexColor = [224, 224, 224, 255];}
						: &0
						{VertexColor = [232, 232, 232, 255];}
						: &0
						{VertexColor = [240, 240, 240, 255];}
						: &0
						{VertexColor = [248, 248, 248, 255];}
						: &0
						{VertexColor = [256, 256, 256, 255] ;}
					]
				}
				HatchSprites
				{
					Type = ResourceSprites
					Location = [.5, 1.5]
					ResourceStorage = Mk2Storage
					Layer = "doodads_high"
					HasZeroResourceSprite = true
					ResourceLevels
					[
						{
							File = "hatch1.png"
							Size = [1, 1]
						}
						{
							File = "hatch3.png"
							Size = [1, 1]
						}
					]
				}
				Indicators
				{
					Type = IndicatorSprites
					Location = [.5, 1.25]
					Layer = "indicators"
					Indicators
					[
						// Turned off.
						{
							Toggle = PowerToggle
							AtlasSprite
							{
								File = &/INDICATORS/PowerOff
								Size = [1, 1]
							}
						}

						// Out of steel.
						{
							Toggle = SteelReq
							Delay = 8
							AtlasSprite
							{
								File = &/INDICATORS/NoResource
								Size = [1, 1]
							}
						}

						// No crew.
						{
							Toggle = PartCrew
							AtlasSprite
							{
								File = &/INDICATORS/NoCrew
								Size = [1, 1]
							}
						}
					]
				}
			}
		}
		
		StellToggle
		{
			Type = ModeToggle
			Mode = DroneType
			OnMode = 2
		}
		StellComponents
		{
			Type = ToggledComponents
			Toggle = StellToggle
			IncludeInBlueprints = true
			Components
			{
				StellStorage
				{
					Type = ResourceStorage
					OperationalToggle = IsOperational
					ResourceType = fake
					MaxResources = 4
					DelayBeforeReadyToUse = 0.5
					//DropResourcesWhenDestroyed = true
					//DropResourcesWhenRemoved = true
					InitToMaxResources = 0
				}
				AmmoStorage
				{
					Type = ResourceStorage
					ResourceType = bullet
					MaxResources = 6
					DropResourcesWhenDestroyed = true
					DropResourcesWhenRemoved = true
					UITileRect = [0 + 16/64, -0.25 + 16/64, 1 - 32/64, 1 - 32/64]
					ToggleOnResources = 6
					ToggleOffResources = 5
				}
				StellAmmoStorage
				{
					Type = ResourceStorage
					OperationalToggle = IsOperational
					ResourceType = fake
					MaxResources = 6
					DelayBeforeReadyToUse = 0.5
					//DropResourcesWhenDestroyed = true
					//DropResourcesWhenRemoved = true
					InitToMaxResources = 0
				}

				AmmoConsumer
				{
					Type = ResourceConsumer
					ResourceType = bullet
					Storage = AmmoStorage
					DefaultPriority = &/PRIORITIES/Weapon_Supply
					OperationalToggle = PowerToggle
					ConsumptionToggleButtonOffset = [0, -.4]
				}
				
				CanBuild
				{
					Type = MultiToggle
					Toggles
					[
						{Toggle = IsOperational}
						{Toggle = SteelReq}
						{Toggle = AmmoStorage}
						{Toggle = StellStorage, invert = true}
						{Toggle = StellAmmoStorage, invert = true}
					]
					Mode = All
				}
				SteelReq
				{
					Type = MultiResourceStorage
					ResourceType = steel
					ResourceStorages = [SteelStorage]
					ToggleOnResources = 4
					ToggleOffResources = 3
				}
		
				BuildConverter
				{
					Type = ResourceConverter
					From
					[
						{
							Storage = BatteryStorage
							Quantity = 100
							MinQuantityForConversion = 1
						}
					]
					OperationalToggle = CanBuild
					ToStorage = BuildStorage
					ToQuantity = 1
					Interval = 10 / 20
				}
				
				BuildStorage
				{
					Type = ResourceStorage
					ResourceType = fake
					MaxResources = 20
					DelayBeforeReadyToUse = 0
					StartingResources = 0
					InitToMaxResources = 0
					InitToMaxResourcesPVP = 0
				}
				
				BuiltConverter
				{
					Type = ResourceConverter
					OperationalToggle = CanBuild
					From
					[
						{
							Storage = BuildStorage
							Quantity = 20
						}
						{
							Storage = SteelStorage
							Quantity = 4
						}
						{
							Storage = AmmoStorage
							Quantity = 6
						}
					]
					To
					[
						{
							Storage = StellStorage
							Quantity = 4
						}
						{
							Storage = StellAmmoStorage
							Quantity = 6
						}
					]
					//ToStorage = StellStorage
					//ToQuantity = 6
					Interval = .15
				}
				ConvertEffects
				{
					Type = TriggeredEffects
					Trigger = BuiltConverter
					Location = [0.5, 0.5]
					MediaEffects = &/COMMON_EFFECTS/MissileLoad
				}
				
				Weapon
				{
					Type = TurretWeapon
					Location = [.5, .5]
					Rotation = -90d
					Emitter = Emitter
					OperationalToggle = IsOperational
					AutoFireToggle = AutoFireToggle
					FireInterval = 0
					FiringArc = 0d
					TargetingArc = 360d
					ValidArc = 360d
					FireThresholdAngle = (&TargetingArc) / 2
					RotateSpeed = 0d
					AllowFireWithBlockedLOS = true
					AIFirepowerRating = 3000
					FirePermissionToggle = FireModeToggle

					AutoTargets
					[
						{
							TargetType = ShipParts
							Toggle = AutoTargetToggle
							EnableInDirectControlMode = true
						}
					]

					CoverageSectorArc
					{
						Texture = &/INDICATORS/VerticalGradient
						VertexColor = [255, 255, 255, 51]
						QuadCount = 64
					}
				}

				ReloadProgressBar
				{
					Type = ProgressBar
					OperationalToggle = IsOperational
					ShowProgressFor = Weapon
				}

				Emitter
				{
					Type = BulletEmitter
					ChainedTo = Weapon
					OperationalToggle = IsOperational
					FireTrigger = Weapon
					GetTargetFrom = Weapon
					ResourceUsage
					[
						{
							ResourceStorage = StellStorage
							ResourcesUsed = 4
						}
						{
							ResourceStorage = StellAmmoStorage
							ResourcesUsed = 6
						}
					]
					//ResourceStorage = StellStorage
					//ResourcesUsed = 4
					Bullet = &<projectiles/stell/Stell1.txt>
					TargetLeadPrediction = false
					Recoil = 30
				}

				LaunchEffect
				{
					Type = TriggeredEffects
					ChainedTo = Weapon
					Trigger = Weapon

					MediaEffects
					[
						: /BASE_SOUNDS/AudioExterior
						{
							Sound = "./Data/ships/terran/missile_launcher/shoot.wav"
							Speed = 0.75
							SpeedVariation = .1
						}
					]
				}
				
				DroneSprite
				{
					Type = ResourceSprites
					Location = [.5, .5]
					Rotation = -90d
					ResourceStorage = StellStorage
					Layer = "weapons"
					ResourceLevels
					[
						{
							File = "stellb3.png"
							NormalsFile = "stellb3_n.png"
							Size = [1, 1]
						}
					]
				}
				/*DroneBuildSprite
				{
					Type = ResourceSprites
					Location = [.5, .5]
					Rotation = -90d
					ResourceStorage = BuildStorage
					Layer = "weapons"
					ResourceLevels
					[
						{
							File = "stellb1.png"
							NormalsFile = "stellb1_n.png"
							Size = [1, 1]
						}
						{
							File = "stellb2.png"
							NormalsFile = "stellb2_n.png"
							Size = [1, 1]
						}
					]
				}*/
				DroneBuildSprite
				{
					Type = ResourceSprites
					Location = [.5, .5]
					Rotation = -90d
					ResourceStorage = BuildStorage
					Layer = "drone_construction"
					ResourceLevels
					[
						{
							File = "StellMask.png"
							NormalsFile = "stellb3_n.png"
							Size = [1, 1]
							VertexColor = [0, 0, 0, 255]
						}
						: &0
						{VertexColor = [8, 8, 8, 255];}
						: &0
						{VertexColor = [16, 16, 16, 255];}
						: &0
						{VertexColor = [24, 24, 24, 255];}
						: &0
						{VertexColor = [32, 32, 32, 255];}
						: &0
						{VertexColor = [40, 40, 40, 255];}
						: &0
						{VertexColor = [48, 48, 48, 255];}
						: &0
						{VertexColor = [56, 56, 56, 255];}
						: &0
						{VertexColor = [64, 64, 64, 255];}
						: &0
						{VertexColor = [72, 72, 72, 255];}
						: &0
						{VertexColor = [80, 80, 80, 255];}
						: &0
						{VertexColor = [88, 88, 88, 255];}
						: &0
						{VertexColor = [96, 96, 96, 255];}
						: &0
						{VertexColor = [104, 104, 104, 255];}
						: &0
						{VertexColor = [112, 112, 112, 255];}
						: &0
						{VertexColor = [120, 120, 120, 255];}
						: &0
						{VertexColor = [128, 128, 128, 255];}
						: &0
						{VertexColor = [136, 136, 136, 255];}
						: &0
						{VertexColor = [144, 144, 144, 255];}
						: &0
						{VertexColor = [152, 152, 152, 255];}
						: &0
						{VertexColor = [160, 160, 160, 255];}
						: &0
						{VertexColor = [168, 168, 168, 255];}
						: &0
						{VertexColor = [176, 176, 176, 255];}
						: &0
						{VertexColor = [184, 184, 184, 255];}
						: &0
						{VertexColor = [192, 192, 192, 255];}
						: &0
						{VertexColor = [200, 200, 200, 255];}
						: &0
						{VertexColor = [208, 208, 208, 255];}
						: &0
						{VertexColor = [216, 216, 216, 255];}
						: &0
						{VertexColor = [224, 224, 224, 255];}
						: &0
						{VertexColor = [232, 232, 232, 255];}
						: &0
						{VertexColor = [240, 240, 240, 255];}
						: &0
						{VertexColor = [248, 248, 248, 255];}
						: &0
						{VertexColor = [256, 256, 256, 255] ;}
					]
				}
				HatchSprites
				{
					Type = ResourceSprites
					Location = [.5, 1.5]
					ResourceStorage = StellStorage
					Layer = "doodads_high"
					HasZeroResourceSprite = true
					ResourceLevels
					[
						{
							File = "hatch1.png"
							Size = [1, 1]
						}
						{
							File = "hatch3.png"
							Size = [1, 1]
						}
					]
				}
				Indicators
				{
					Type = IndicatorSprites
					Location = [.5, 1.25]
					Layer = "indicators"
					Indicators
					[
						// Turned off.
						{
							Toggle = PowerToggle
							AtlasSprite
							{
								File = &/INDICATORS/PowerOff
								Size = [1, 1]
							}
						}
						
						// Out of ammo.
						{
							Toggle = AmmoStorage
							Delay = 10
							AtlasSprite
							{
								File = &/INDICATORS/NoAmmo
								Size = [1, 1]
							}
						}

						// Out of steel.
						{
							Toggle = SteelReq
							Delay = 10
							AtlasSprite
							{
								File = &/INDICATORS/NoResource
								Size = [1, 1]
							}
						}

						// No crew.
						{
							Toggle = PartCrew
							AtlasSprite
							{
								File = &/INDICATORS/NoCrew
								Size = [1, 1]
							}
						}
					]
				}
			}
		}

		SparkerToggle
		{
			Type = ModeToggle
			Mode = DroneType
			OnMode = 3
		}
		SparkerComponents
		{
			Type = ToggledComponents
			Toggle = SparkerToggle
			IncludeInBlueprints = true
			Components
			{
				SparkerStorage
				{
					Type = ResourceStorage
					OperationalToggle = IsOperational
					ResourceType = fake
					MaxResources = 1
					DelayBeforeReadyToUse = 0.5
					//DropResourcesWhenDestroyed = true
					//DropResourcesWhenRemoved = true
					InitToMaxResources = 0
				}
				
				CanBuild
				{
					Type = MultiToggle
					Toggles
					[
						{Toggle = IsOperational}
						{Toggle = SteelReq}
						{Toggle = SparkerStorage, invert = true}
					]
					Mode = All
				}
				SteelReq
				{
					Type = MultiResourceStorage
					ResourceType = steel
					ResourceStorages = [SteelStorage]
					ToggleOnResources = 1
					ToggleOffResources = 0
				}
		
				BuildConverter
				{
					Type = ResourceConverter
					From
					[
						{
							Storage = BatteryStorage
							Quantity = 200
							MinQuantityForConversion = 1
						}
					]
					OperationalToggle = CanBuild
					ToStorage = BuildStorage
					ToQuantity = 1
					Interval = 2.5 / 10
				}
				
				BuildStorage
				{
					Type = ResourceStorage
					ResourceType = fake
					MaxResources = 10
					DelayBeforeReadyToUse = 0
					StartingResources = 0
					InitToMaxResources = 0
					InitToMaxResourcesPVP = 0
				}
				
				BuiltConverter
				{
					Type = ResourceConverter
					OperationalToggle = CanBuild
					From
					[
						{
							Storage = BuildStorage
							Quantity = 10
						}
						{
							Storage = SteelStorage
							Quantity = 1
						}
					]
					ToStorage = SparkerStorage
					ToQuantity = 1
					Interval = .15
				}
				ConvertEffects
				{
					Type = TriggeredEffects
					Trigger = BuiltConverter
					Location = [0.5, 0.5]
					MediaEffects = &/COMMON_EFFECTS/MissileLoad
				}
				
				Weapon
				{
					Type = TurretWeapon
					Location = [.5, .5]
					Rotation = -90d
					Emitter = Emitter
					OperationalToggle = IsOperational
					AutoFireToggle = AutoFireToggle
					FireInterval = 0
					FiringArc = 0d
					TargetingArc = 360d
					ValidArc = 360d
					FireThresholdAngle = (&TargetingArc) / 2
					RotateSpeed = 0d
					AllowFireWithBlockedLOS = true
					AIFirepowerRating = 1000
					FirePermissionToggle = FireModeToggle

					AutoTargets
					[
						{
							TargetType = ShipParts
							Toggle = AutoTargetToggle
							EnableInDirectControlMode = true
						}
					]

					CoverageSectorArc
					{
						Texture = &/INDICATORS/VerticalGradient
						VertexColor = [255, 255, 255, 51]
						QuadCount = 64
					}
				}

				ReloadProgressBar
				{
					Type = ProgressBar
					OperationalToggle = IsOperational
					ShowProgressFor = Weapon
				}

				Emitter
				{
					Type = BulletEmitter
					ChainedTo = Weapon
					OperationalToggle = IsOperational
					FireTrigger = Weapon
					GetTargetFrom = Weapon
					ResourceStorage = SparkerStorage
					ResourcesUsed = 1
					Bullet = &<projectiles/sparker/sparker0.rules>
					TargetLeadPrediction = false
					Recoil = 10
				}

				LaunchEffect
				{
					Type = TriggeredEffects
					ChainedTo = Weapon
					Trigger = Weapon

					MediaEffects
					[
						: /BASE_SOUNDS/AudioExterior
						{
							Sound = "./Data/ships/terran/missile_launcher/shoot.wav"
							Speed = 1.0
							SpeedVariation = .1
						}
					]
				}
				
				DroneSprites
				{
					Type = ResourceSprites
					Location = [.5, .5]
					Rotation = -90d
					ResourceStorage = SparkerStorage
					Layer = "weapons"
					ResourceLevels
					[
						{
							File = "sparker.png"
							NormalsFile = "sparker_n.png"
							Size = [1, 1]
						}
					]
				}
				DroneBuildSprite
				{
					Type = ResourceSprites
					Location = [.5, .5]
					Rotation = -90d
					ResourceStorage = BuildStorage
					Layer = "drone_construction"
					ResourceLevels
					[
						{
							File = "sparkerMask.png"
							NormalsFile = "sparker_n.png"
							Size = [1, 1]
							VertexColor = [0, 0, 0, 255]
						}
						: &0
						{VertexColor = [8, 8, 8, 255];}
						: &0
						{VertexColor = [16, 16, 16, 255];}
						: &0
						{VertexColor = [24, 24, 24, 255];}
						: &0
						{VertexColor = [32, 32, 32, 255];}
						: &0
						{VertexColor = [40, 40, 40, 255];}
						: &0
						{VertexColor = [48, 48, 48, 255];}
						: &0
						{VertexColor = [56, 56, 56, 255];}
						: &0
						{VertexColor = [64, 64, 64, 255];}
						: &0
						{VertexColor = [72, 72, 72, 255];}
						: &0
						{VertexColor = [80, 80, 80, 255];}
						: &0
						{VertexColor = [88, 88, 88, 255];}
						: &0
						{VertexColor = [96, 96, 96, 255];}
						: &0
						{VertexColor = [104, 104, 104, 255];}
						: &0
						{VertexColor = [112, 112, 112, 255];}
						: &0
						{VertexColor = [120, 120, 120, 255];}
						: &0
						{VertexColor = [128, 128, 128, 255];}
						: &0
						{VertexColor = [136, 136, 136, 255];}
						: &0
						{VertexColor = [144, 144, 144, 255];}
						: &0
						{VertexColor = [152, 152, 152, 255];}
						: &0
						{VertexColor = [160, 160, 160, 255];}
						: &0
						{VertexColor = [168, 168, 168, 255];}
						: &0
						{VertexColor = [176, 176, 176, 255];}
						: &0
						{VertexColor = [184, 184, 184, 255];}
						: &0
						{VertexColor = [192, 192, 192, 255];}
						: &0
						{VertexColor = [200, 200, 200, 255];}
						: &0
						{VertexColor = [208, 208, 208, 255];}
						: &0
						{VertexColor = [216, 216, 216, 255];}
						: &0
						{VertexColor = [224, 224, 224, 255];}
						: &0
						{VertexColor = [232, 232, 232, 255];}
						: &0
						{VertexColor = [240, 240, 240, 255];}
						: &0
						{VertexColor = [248, 248, 248, 255];}
						: &0
						{VertexColor = [256, 256, 256, 255] ;}
					]
				}
				
				HatchSprites
				{
					Type = ResourceSprites
					Location = [.5, 1.5]
					ResourceStorage = SparkerStorage
					Layer = "doodads_high"
					HasZeroResourceSprite = true
					ResourceLevels
					[
						{
							File = "hatch1.png"
							Size = [1, 1]
						}
						{
							File = "hatch3.png"
							Size = [1, 1]
						}
					]
				}
				Indicators
				{
					Type = IndicatorSprites
					Location = [.5, 1.25]
					Layer = "indicators"
					Indicators
					[
						// Turned off.
						{
							Toggle = PowerToggle
							AtlasSprite
							{
								File = &/INDICATORS/PowerOff
								Size = [1, 1]
							}
						}

						// Out of steel.
						{
							Toggle = SteelReq
							Delay = 2.5
							AtlasSprite
							{
								File = &/INDICATORS/NoResource
								Size = [1, 1]
							}
						}

						// No crew.
						{
							Toggle = PartCrew
							AtlasSprite
							{
								File = &/INDICATORS/NoCrew
								Size = [1, 1]
							}
						}
					]
				}
			}
		}
		
		BuildConverterProxy
		{
			Type = ToggleProxy
			ComponentID = BuildConverter
		}
		
		BuildingGraphics
		{
			Type = Graphics
			Location = [.5, .5]
			OperationalToggle = BuildConverterProxy
			AnimationToggle = BuildConverterProxy
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"build1.png"
							"build2.png"
							"build3.png"
							"build4.png"
							"build5.png"
							"build6.png"
							"build7.png"
							"build8.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.075
						AnimationStartTime = Zero
					}
				]
			}
			/*NonOperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "build_off.png"
						Size = [1, 1]
					}
				]
			}*/
		}
		
		SteelStorage
		{
			Type = ResourceStorage
			ResourceType = steel
			//MaxResources = 10
			MaxResources = ceil((&<./data/resources/steel/steel.rules>/MaxStackSize) * 0.5)
			DropResourcesWhenDestroyed = true
			UITileRect = [0 + 16/64, 1 + 16/64, 1 - 32/64, 1 - 32/64]
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/MissileLoad
		}
		SteelConsumer
		{
			Type = ResourceConsumer
			ResourceType = steel
			Storage = SteelStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			OperationalToggle = PowerToggle
			ConsumptionToggleButtonOffset = [0, -.4]
		}
		
		SteelSprites
		{
			Type = ResourceSprites
			Location = [.5, 1.5]
			ResourceStorage = SteelStorage
			Layer = "doodads_low"
			RangeLow = 0
			RangeHigh = 8
			ResourceLevels
			[
				{
					File = "steelcount1.png"
					Size = [1, 1]
				}
				{
					File = "steelcount2.png"
					Size = [1, 1]
				}
				{
					File = "steelcount3.png"
					Size = [1, 1]
				}
				{
					File = "steelcount4.png"
					Size = [1, 1]
				}
			]
		}
		
		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 4000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
		}
		
		BatterySprites
		{
			Type = ResourceSprites
			Location = [.5, 1.5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_low"
			RangeLow = 0
			RangeHigh = 2000
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [1, 1]
				}
				{
					File = "batteries2.png"
					Size = [1, 1]
				}
			]
		}		
		BlueprintsMK1
		{
			Type = BlueprintSprite
			File = "blueprints1.png"
			Size = [1, 2]

			ShowOnlyInToggleMode
			{
				ToggleID = tinydronetype
				Mode = 0
			}
		}
		BlueprintsMK2
		{
			Type = BlueprintSprite
			File = "blueprints2.png"
			Size = [1, 2]

			ShowOnlyInToggleMode
			{
				ToggleID = tinydronetype
				Mode = 1
			}
		}
		BlueprintsStell
		{
			Type = BlueprintSprite
			File = "blueprints3.png"
			Size = [1, 2]

			ShowOnlyInToggleMode
			{
				ToggleID = tinydronetype
				Mode = 2
			}
		}
		BlueprintsSparker
		{
			Type = BlueprintSprite
			File = "blueprints4.png"
			Size = [1, 2]

			ShowOnlyInToggleMode
			{
				ToggleID = tinydronetype
				Mode = 3
			}
		}
		
		CrewLocation1
		{
			Type = CrewLocation
			Location = [.5, 1.5]
			Rotation = 180d
		}
		
		
		PartCrew
		{
			Type = PartCrew
			Crew = 1
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			CrewDestinations
			[
				[.5, 1.5]
			]
			CrewLocations
			[
				CrewLocation1
			]
		}

		Graphics
		{
			Type = Graphics
			Location = [.5, 1]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				Offset = [0, 0.5]
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 1]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				Offset = [0, 0.5]
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [1, 1]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				Offset = [0, 0.5]
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 1]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_n.png"
						Size = [1, 2]
					}
				]
			}
		}
		
	External_Walls_Graphics
	{
		
		Type = Graphics
		OperationalToggle = IsOperational
		Location = [0.5, 0.5]
		Walls
		{
			Layer = "external_walls"
			DamageLevels
			[
				{
					File = "external_walls.png"
					NormalsFile = "external_walls_n.png"
					Size = [1, 1]
				}
			]
		}
		OperationalRoofLighting
		{
			Layer = "roof_lights_fancy"
			Offset = [0, 1.06]
			DamageLevels
			[
				{
					File = "./Data/ships/common/light_blob.png"
					Size = [2, 2]
					Z = 0.35 // Controls the "height" of the light for the purposes of normal mapping. Set to -1 (or any negative number) to disable normal lighting for this light.
					VertexColor = [255, 10, 0]
				}
			]
		}
	}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [.5, 1]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}
		
		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [.5, 1.25] //yes 
		}

	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerPerShot = 0.8
		PowerPerSecond = (&PowerPerShot) * (&ROF)
		ROF = 1 / 6

		RecPower = &PowerPerSecond
		RecCrew = (&CrewRequired)// + (&RecPower) * 4
	}
	
	StatsNotesKey = "Stats/DroneLauncherNotes"
}/*
SparkerStorage
{
	Type = ResourceStorage
	OperationalToggle = IsOperational
	ResourceType = steel
	MaxResources = 1
	DelayBeforeReadyToUse = 0.5
}
CanBuild
{
	Type = MultiToggle
	Toggles
	[
		{Toggle = IsOperational}
		{Toggle = SparkerStorage, invert = true}
	]
	Mode = All
}
Converter
{
	Type = ResourceConverter
	OperationalToggle = CanBuild
	From
	[
		{
			Storage = SteelStorage
			Quantity = 1
		}
		{
			Storage = BatteryStorage
			Quantity = 500
			MinQuantityForConversion = 1
		}
	]
	ToStorage = SparkerStorage
	ToQuantity = 1
	Interval = .15
}
ConvertEffects
{
	Type = TriggeredEffects
	Trigger = Converter
	Location = [0.5, 0.5]
	MediaEffects = &/COMMON_EFFECTS/MissileLoad
}

CanBuild
{
	Type = MultiToggle
	Toggles
	[
		{Toggle = IsOperational}
		{Toggle = SparkerStorage, invert = true}
		{Toggle = Cooldown}
	]
	//Toggles = [Cooldown, FireModeToggle]
	Mode = All
}
CooldownResetTrigger
{
	Type = MultiTrigger
	Triggers = [Weapon]
}
Cooldown
{
	Type = Timer
	Duration = 2.5
	AutoStart = true
	StartTrigger = CooldownResetTrigger
}
*/