Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/CRAM_Firingpiece"
	IconNameKey = "Parts/CRAM_FiringpieceIcon"
	ID = janiTNT.CRAM_firingpiece // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	//OtherIDs = [big_cannon]
	EditorGroup = "WeaponsProjectile"
	DescriptionKey = "Parts/CRAM_FiringpieceDesc"
	Resources
	[
		[steel, 80]
		[coil, 30]
	]
	TypeCategories = [weapon, uses_ammo, is_crewed, CRAM_barrel, barrel_heavy, CRAM_Firing_Piece]
	Size = [1, 1]
	//PhysicalRect = [0, 1, 3, 2]
	//SaveRect = &PhysicalRec
	SelectionPriority = 1
	SelectionTypeByRotation = true
	SelectionTypeID = "cannons"
	MaxHealth = 8000
	InitialPenetrationResistance = 5
	PenetrationRectType = Normal
	//ProhibitAbove = 2
	CrewSpeedFactor = 0
	ReceivableBuffs : ^/0/ReceivableBuffs [JaniCRAM_BarrelMass, JaniCRAM_Velocity, JaniCRAM_Range, JaniCRAM_Health, JaniCRAM_DamageMain, AdvS_Setting, AdvS_Setting_Second, JaniCRAM_ReverseBarrelGauge, JaniCRAM_Accuraccy]
	/*AllowedDoorLocations
	[
		[-1, 1]
		[-1, 2]
		[0, 3]
		[1, 3]
		[2, 3]
		[3, 2]
		[3, 1]
	]*/
	AllowedDoorLocations = []
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [64, 64]
	}
	Components : ^/0/Components
	&/JANI_COMMON/SettingsOnes/Part/Components
	&/JANI_COMMON/SettingsTens/Part/Components //AdvS_Setting_Second
	{
		BarrelGaugeSelfBuffProvider
		{
			Type = SelfBuffProvider
			BuffType = JaniCRAM_ReverseBarrelGauge
			BuffAmount = { BaseValue=0; BuffType=AdvS_Setting_Second; BuffMode=Add }
		}
		
		BarrelGaugeBuffProvider
		{
			Type = AreaBuffProvider
			BuffType = JaniCRAM_ReverseBarrelGauge
			BuffArea = [0, -1, 1, 1]
			//OperationalToggle = DistanceBuffToggle
			//ChainsFromBuffType = JaniCRAM_ReverseBarrelGauge
			BuffAmount = { BaseValue=0; BuffType=AdvS_Setting_Second; BuffMode=Add }
			Criteria
			{
				Rot = 0
			}
		}
		
		GaugeBuffValue
		{
			Type = BuffableValue
			Value = { BaseValue=1; BuffType=JaniCRAM_ReverseBarrelGauge; BuffMode=Multiply; }
		}
		InvGaugeBuffValue
		{
			Type = BuffableValue
			Value = { BaseValue=1; BuffType=JaniCRAM_ReverseBarrelGauge; BuffMode=Divide; }
		}
		VelocityBuffProvider
		{
			Type = SelfBuffProvider
			BuffType = JaniCRAM_Velocity
			BuffAmount = { BaseValue=0.2; BuffType=JaniCRAM_BarrelMass; BuffMode=Multiply; MaxValue=1;}
			BuffMultiplier = InvGaugeBuffValue
		}
		RangeBuffProvider
		{
			Type = SelfBuffProvider
			BuffType = JaniCRAM_Range
			BuffAmount = { BaseValue=0.3; BuffType=JaniCRAM_BarrelMass; BuffMode=Multiply; }
			BuffMultiplier = InvGaugeBuffValue
		}
		AccuraccyBuffProvider
		{
			Type = SelfBuffProvider
			BuffType = JaniCRAM_Accuraccy
			BuffAmount = { BaseValue=0.4; BuffType=JaniCRAM_BarrelMass; BuffMode=Multiply; }
			BuffMultiplier = InvGaugeBuffValue
		}
		HealthBuffProvider
		{
			Type = SelfBuffProvider
			BuffType = JaniCRAM_Health
			BuffAmount = { BaseValue=1; BuffType=JaniCRAM_ReverseBarrelGauge; BuffMode=Add; }
			//BuffMultiplier = InvGaugeBuffValue
		}
		DamageBuffProvider
		{
			Type = SelfBuffProvider
			BuffType = JaniCRAM_DamageMain
			BuffAmount = { BaseValue=1; BuffType=JaniCRAM_ReverseBarrelGauge; BuffMode=Multiply; }
			//BuffMultiplier = VelocityBuffValue
		}
		
		TurretRotationBuffProvider
		{
			Type = SelfBuffProvider
			BuffType = JaniCRAM_TurretRotation
			BuffAmount = { BaseValue=1; BuffType=JaniCRAM_BarrelMass; BuffMode=Multiply; }
			BuffMultiplier = GaugeBuffValue
		}

		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 4
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		/*AmmoStorage
		{
			Type = ResourceStorage
			ResourceType = bullet
			MaxResources = 100
			DelayBeforeReadyToUse = .25
			//AnticipateMoreResourcesFrom = ["AmmoStorage"]
			ToggleOnResources = 4
			ToggleOffResources = 3
			UITileRect = [1 + 7/64, .4 + 7/64, 1 - 14/64, 1 - 14/64]
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/AmmoLoad
			DropResourcesWhenDestroyed = true
		}*/

		Graphics
		{
			Type = Graphics
			Location = [.5, .5]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				Offset = [0, 0]
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 1]
					}
				]
			}
			/*OperationalLighting
			{
				Layer = "lights_add"
				Offset = [0, 0]
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [3, 4]
					}
				]
			}*/
			Walls
			{
				Layer = "walls"
				Offset = [0, 0]
				DamageLevels
				[
					{
						File = "Door_Core1.png"
						Size = [1, 1]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				Offset = [0, 0]
				DamageLevels
				[
					{
						File = "./data/ships/terran/corridor/roof.png"
						NormalsFile = "./data/ships/terran/corridor/roof_normals.png"
						Size = [1, 1]
					}
					{
						File = "./data/ships/terran/corridor/roof_33.png"
						NormalsFile = "./data/ships/terran/corridor/roof_normals_33.png"
						Size = [1, 1]
					}
					{
						File = "./data/ships/terran/corridor/roof_66.png"
						NormalsFile = "./data/ships/terran/corridor/roof_normals_66.png"
						Size = [1, 1]
					}
				]
			}/*
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				Offset = [0, 0.5]
				DamageLevels
				[
					{
						File = "roof_glows.png"
						Size = [3, 3]
					}
					{
						File = "roof_glows_33.png"
						Size = [3, 3]
					}
					{
						File = "roof_glows_66.png"
						Size = [3, 3]
					}
				]
			}
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				Offset = [0, -0.03125]
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [6.5, 6.5]
						Z = 0.5 // Controls the "height" of the light for the purposes of normal mapping. Set to -1 (or any negative number) to disable normal lighting for this light.
						VertexColor = [255*1.5, 0, 0]
					}
				]
			}*/
		}
		
		GaugeBuffToggle
		{
			Type = BuffToggle
			BuffType = JaniCRAM_ReverseBarrelGauge
		}
		
		Size0BuffToggle
		{
			Type = BuffToggle
			BuffType = JaniCRAM_ReverseBarrelGauge
			MaxBuffValue = 0
			MinBuffValue = 0
		}
		
		Size0 //Failsafe if no Gauge Buff exists
		{
			Type = MultiToggle
			Toggles
			[
				{Toggle = Size0BuffToggle2, invert = true}
				{Toggle = GaugeBuffToggle, invert = true}
				{Toggle = Size0BuffToggle}
			]
			Mode = Any
		}
		
		Size0BuffToggle2
		{
			Type = BuffToggle
			BuffType = JaniCRAM_ReverseBarrelGauge
			MinBuffValue = 1
			MaxBuffValue = 20000
		}
		
		Size1BuffToggle
		{
			Type = BuffToggle
			BuffType = JaniCRAM_ReverseBarrelGauge
			MinBuffValue = 1
			MaxBuffValue = 1
		}
		Size2BuffToggle : Size1BuffToggle
		{MinBuffValue = 2; MaxBuffValue = 2}
		Size3BuffToggle : Size1BuffToggle
		{MinBuffValue = 3; MaxBuffValue = 3}
		Size4BuffToggle : Size1BuffToggle
		{MinBuffValue = 4; MaxBuffValue = 4}
		Size5BuffToggle : Size1BuffToggle
		{MinBuffValue = 5; MaxBuffValue = 5}
		Size6BuffToggle : Size1BuffToggle
		{MinBuffValue = 6; MaxBuffValue = 6}
		Size7BuffToggle : Size1BuffToggle
		{MinBuffValue = 7; MaxBuffValue = 7}
		Size8BuffToggle : Size1BuffToggle
		{MinBuffValue = 8; MaxBuffValue = 8}
		Size9BuffToggle : Size1BuffToggle
		{MinBuffValue = 9; MaxBuffValue = 9}
		Size10BuffToggle : Size1BuffToggle
		{MinBuffValue = 10; MaxBuffValue = 10}
		Size11BuffToggle : Size1BuffToggle
		{MinBuffValue = 11; MaxBuffValue = 11}
		Size12BuffToggle : Size1BuffToggle
		{MinBuffValue = 12; MaxBuffValue = 12}
		Size13BuffToggle : Size1BuffToggle
		{MinBuffValue = 13; MaxBuffValue = 13}
		Size14BuffToggle : Size1BuffToggle
		{MinBuffValue = 14; MaxBuffValue = 14}
		Size15BuffToggle : Size1BuffToggle
		{MinBuffValue = 15; MaxBuffValue = 15}
		Size16BuffToggle : Size1BuffToggle
		{MinBuffValue = 16; MaxBuffValue = 16}
		
		Size0Emitter
		{
			Type = ToggledComponents
			Toggle = Size0
			Components
			{
				BulletEmitter : ~/BaseBulletEmitter
				{
					Bullet = &<Bullets.rules>/Bullet0
					ResourcesUsed = 10
					Recoil = { BaseValue=100; BuffType=JaniCRAM_Velocity; BuffMode=Multiply; }
				}
				LoadersAmmoStorage : ~/BaseAmmoStorage
				{
					MaxResources = &../BulletEmitter/ResourcesUsed
					ToggleOnResources = &../BulletEmitter/ResourcesUsed
					ToggleOffResources = (&../BulletEmitter/ResourcesUsed) - 1
				}
			}
		}
		
		Size1Emitter
		{
			Type = ToggledComponents
			Toggle = Size1BuffToggle
			Components
			{
				BulletEmitter : ~/BaseBulletEmitter
				{
					Bullet = &<Bullets.rules>/Bullet1
					ResourcesUsed = 20 * 1
					Recoil = { BaseValue=100; BuffType=JaniCRAM_Velocity; BuffMode=Multiply; }
				}
				LoadersAmmoStorage : ~/BaseAmmoStorage
				{
					MaxResources = &../BulletEmitter/ResourcesUsed
					ToggleOnResources = &../BulletEmitter/ResourcesUsed
					ToggleOffResources = (&../BulletEmitter/ResourcesUsed) - 1
				}
			}
		}
		
		Size2Emitter
		{
			Type = ToggledComponents
			Toggle = Size2BuffToggle
			Components
			{
				BulletEmitter : ~/BaseBulletEmitter
				{
					Bullet = &<Bullets.rules>/Bullet2
					ResourcesUsed = 20 * 2
					Recoil = { BaseValue=100; BuffType=JaniCRAM_Velocity; BuffMode=Multiply; }
				}
				LoadersAmmoStorage : ~/BaseAmmoStorage
				{
					MaxResources = &../BulletEmitter/ResourcesUsed
					ToggleOnResources = &../BulletEmitter/ResourcesUsed
					ToggleOffResources = (&../BulletEmitter/ResourcesUsed) - 1
				}
			}
		}
		
		Size3Emitter
		{
			Type = ToggledComponents
			Toggle = Size3BuffToggle
			Components
			{
				BulletEmitter : ~/BaseBulletEmitter
				{
					Bullet = &<Bullets.rules>/Bullet3
					ResourcesUsed = 20 * 3
					Recoil = { BaseValue=100; BuffType=JaniCRAM_Velocity; BuffMode=Multiply; }
				}
				LoadersAmmoStorage : ~/BaseAmmoStorage
				{
					MaxResources = &../BulletEmitter/ResourcesUsed
					ToggleOnResources = &../BulletEmitter/ResourcesUsed
					ToggleOffResources = (&../BulletEmitter/ResourcesUsed) - 1
				}
			}
		}
		
		Size4Emitter
		{
			Type = ToggledComponents
			Toggle = Size4BuffToggle
			Components
			{
				BulletEmitter : ~/BaseBulletEmitter
				{
					Bullet = &<Bullets.rules>/Bullet4
					ResourcesUsed = 20 * 4
					Recoil = { BaseValue=100; BuffType=JaniCRAM_Velocity; BuffMode=Multiply; }
				}
				LoadersAmmoStorage : ~/BaseAmmoStorage
				{
					MaxResources = &../BulletEmitter/ResourcesUsed
					ToggleOnResources = &../BulletEmitter/ResourcesUsed
					ToggleOffResources = (&../BulletEmitter/ResourcesUsed) - 1
				}
			}
		}
		
		Size5Emitter
		{
			Type = ToggledComponents
			Toggle = Size5BuffToggle
			Components
			{
				BulletEmitter : ~/BaseBulletEmitter
				{
					Bullet = &<Bullets.rules>/Bullet5
					ResourcesUsed = 20 * 5
					Recoil = { BaseValue=100; BuffType=JaniCRAM_Velocity; BuffMode=Multiply; }
				}
				LoadersAmmoStorage : ~/BaseAmmoStorage
				{
					MaxResources = &../BulletEmitter/ResourcesUsed
					ToggleOnResources = &../BulletEmitter/ResourcesUsed
					ToggleOffResources = (&../BulletEmitter/ResourcesUsed) - 1
				}
			}
		}
		
		Size6Emitter
		{
			Type = ToggledComponents
			Toggle = Size6BuffToggle
			Components
			{
				BulletEmitter : ~/BaseBulletEmitter
				{
					Bullet = &<Bullets.rules>/Bullet6
					ResourcesUsed = 20 * 6
					Recoil = { BaseValue=100; BuffType=JaniCRAM_Velocity; BuffMode=Multiply; }
				}
				LoadersAmmoStorage : ~/BaseAmmoStorage
				{
					MaxResources = &../BulletEmitter/ResourcesUsed
					ToggleOnResources = &../BulletEmitter/ResourcesUsed
					ToggleOffResources = (&../BulletEmitter/ResourcesUsed) - 1
				}
			}
		}
		
		Size7Emitter
		{
			Type = ToggledComponents
			Toggle = Size7BuffToggle
			Components
			{
				BulletEmitter : ~/BaseBulletEmitter
				{
					Bullet = &<Bullets.rules>/Bullet7
					ResourcesUsed = 20 * 7
					Recoil = { BaseValue=100; BuffType=JaniCRAM_Velocity; BuffMode=Multiply; }
				}
				LoadersAmmoStorage : ~/BaseAmmoStorage
				{
					MaxResources = &../BulletEmitter/ResourcesUsed
					ToggleOnResources = &../BulletEmitter/ResourcesUsed
					ToggleOffResources = (&../BulletEmitter/ResourcesUsed) - 1
				}
			}
		}
		
		Size8Emitter
		{
			Type = ToggledComponents
			Toggle = Size8BuffToggle
			Components
			{
				BulletEmitter : ~/BaseBulletEmitter
				{
					Bullet = &<Bullets.rules>/Bullet8
					ResourcesUsed = 20 * 8
					Recoil = { BaseValue=100; BuffType=JaniCRAM_Velocity; BuffMode=Multiply; }
				}
				LoadersAmmoStorage : ~/BaseAmmoStorage
				{
					MaxResources = &../BulletEmitter/ResourcesUsed
					ToggleOnResources = &../BulletEmitter/ResourcesUsed
					ToggleOffResources = (&../BulletEmitter/ResourcesUsed) - 1
				}
			}
		}
		
		Size9Emitter
		{
			Type = ToggledComponents
			Toggle = Size9BuffToggle
			Components
			{
				BulletEmitter : ~/BaseBulletEmitter
				{
					Bullet = &<Bullets.rules>/Bullet9
					ResourcesUsed = 20 * 9
					Recoil = { BaseValue=100; BuffType=JaniCRAM_Velocity; BuffMode=Multiply; }
				}
				LoadersAmmoStorage : ~/BaseAmmoStorage
				{
					MaxResources = &../BulletEmitter/ResourcesUsed
					ToggleOnResources = &../BulletEmitter/ResourcesUsed
					ToggleOffResources = (&../BulletEmitter/ResourcesUsed) - 1
				}
			}
		}
		
		FireEffect
		{
			Type = TriggeredEffects
			ChainedTo = EmitterSelfProxyChainable
			//Rotation = 90d
			Trigger = TurretEmitterProxyTrigger
			//Location = [0, 1]
			
			MediaEffectsFactor = { BaseValue=1; BuffType=JaniCRAM_ReverseBarrelGauge; BuffMode=Multiply; }

			MediaEffects
			[
				&<./data/ships/terran/cannon_deck/particles/cannon_shoot_deck.rules>
				&<./data/ships/terran/cannon_deck/particles/cannon_shoot_deck_flash.rules>
				&<./data/ships/terran/cannon_deck/particles/cannon_shoot_deck_flare.rules>
				&<./data/ships/terran/cannon_deck/particles/cannon_smoke_deck.rules>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "./data/ships/terran/cannon_deck/shoot.wav"
					SpeedVariation = .25
				}

				: /BASE_SHAKE
				{
					ShakeAmount = .1
					Duration = 1
				}
			]
		}
		
		Offset
		{
			Type = Graphics
			ChainedTo = Turret
			Location = [1.5, -0.5]
			Rotation = 90d
		}

		Turret
		{
			Type = TurretWeapon
			Location = [.5, .5] // Relative to upper-left corner of unrotated part.
			Rotation = -90d // Relative to unrotated part.
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = { BaseValue=1; BuffType=JaniCRAM_ReverseBarrelGauge; BuffMode=Multiply; }
			FiringArc = 10d
			RotateSpeed = { BaseValue=25d; BuffType=JaniCRAM_TurretRotation; BuffMode=Divide; }
			FireThresholdAngle = 1.5d
			AIFirepowerRating = { BaseValue=8000; BuffType=JaniCRAM_ReverseBarrelGauge; BuffMode=Multiply; }
			Emitter = TurretEmitterProxy
			FirePermissionToggle = FireModeToggle

			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}

		ReloadProgressBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = Turret
		}
		
		TurretEmitterProxy
		{
			Type = EmitterProxy
			ComponentID = BulletEmitter
		}
		
		EmitterSelfProxyChainable
		{
			Type = ChainableProxy
			ComponentID = BulletEmitter
		}
		
		TurretEmitterProxyTrigger
		{
			Type = TriggerProxy
			ComponentID = BulletEmitter
		}
		
		EmitterSelfProxy
		{
			Type = ChainableProxy
			ComponentID = EmitterProxy
		}
		
		IsNotFinalpiece
		{
			Type = ComponentPresenceToggle
			PartLocation = [0, -1]
			ComponentID = IsNotFinalpiece
			PartCriteria
			{
				Rot = 0
			}
		}
		
		ToggledOnEmitterProxy
		{
			Type = ToggledComponents
			Toggle = IsNotFinalpiece
			Components
			{
				EmitterProxy
				{
					Type = ChainableProxy
					PartLocation = [0, -1]
					ComponentID = EmitterProxy
					PartCriteria
					{
						Rot = 0
					}
				}
			}
		}
		
		ToggledOffEmitterProxy
		{
			Type = ToggledComponents
			Toggle = IsNotFinalpiece
			Invert = true
			Components
			{
				EmitterProxy
				{
					Type = Graphics
					ChainedTo = Offset
				}
			}
		}
		
		
		
		/*AmmoLoader
		{
			Type = ResourceConverter
			FromStorage = AmmoStorage
			ToStorage = LoadedAmmo
			FromQuantity = 1
			ToQuantity = 1
			Interval = .15
			DelayTrigger = Turret
			DelayAfterTrigger = .5
		}

		LoadEffects
		{
			Type = TriggeredEffects
			Trigger = AmmoLoader
			MediaEffects = &/COMMON_EFFECTS/AmmoLoad
		}

		CrewLocation1
		{
			Type = CrewLocation
			ChainedTo = Turret
			Location = [-.365, -.545]
			Rotation = 45d
		}
		CrewLocation2
		{
			Type = CrewLocation
			ChainedTo = Turret
			Location = [-.365, .6]
			Rotation = 90d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 2
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [AmmoPrereq]
			CrewDestinations
			[
				[.95, 1.4]
				[2.1, 1.4]
			]
			CrewLocations
			[
				CrewLocation1
				CrewLocation2
			]
		}

		TurretCollider
		{
			Type = CircleCollider
			ChainedTo = Turret
			Radius = 1.155
			Density = 1.5
		}

		TurretGraphics
		{
			Type = Graphics
			ChainedTo = Turret
			Location = [0, 0]
			Rotation = 90d
			OperationalToggle = IsOperational
			DoodadToggle = LoadedAmmo
			ShowToggledDoodadsWhenNotOperational = true
			ToggleOnDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"bullet_door1.png"
							"bullet_door2.png"
							"bullet_door3.png"
						]
						Size = [1, 1]
						Offset = [0, -0.25]
						AnimationInterval = 0.0666
						ClampAnimation = true
					}
				]
			}
			Floor
			{
				Layer = "turrets"
				DamageLevels
				[
					{
						File = "turret_floor.png"
						Size = [3, 3]
					}
					{
						File = "turret_floor_33.png"
						Size = [3, 3]
					}
					{
						File = "turret_floor_66.png"
						Size = [3, 3]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, -0.09375]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"console_on1.png"
							"console_on2.png"
							"console_on3.png"
							"console_on4.png"
							"console_on5.png"
							"console_on6.png"
							"console_on7.png"
							"console_on8.png"
						]
						Size = [2, 1]
						AnimationInterval = 0.15
					}
					{
						AnimationFiles
						[
							"console_on1_33.png"
							"console_on2_33.png"
							"console_on3_33.png"
							"console_on4_33.png"
							"console_on5_33.png"
							"console_on6_33.png"
							"console_on7_33.png"
							"console_on8_33.png"
						]
						Size = [2, 1]
						AnimationInterval = 0.15
					}
					{
						AnimationFiles
						[
							"console_on1_66.png"
							"console_on2_66.png"
							"console_on3_66.png"
							"console_on4_66.png"
							"console_on5_66.png"
							"console_on6_66.png"
							"console_on7_66.png"
							"console_on8_66.png"
						]
						Size = [2, 1]
						AnimationInterval = 0.15
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, -0.09375]
				DamageLevels
				[
					{
						File = "console_off.png"
						Size = [2, 1]
					}
					{
						File = "console_off_33.png"
						Size = [2, 1]
					}
					{
						File = "console_off_66.png"
						Size = [2, 1]
					}
				]
			}
		}

		BarrelGraphics
		{
			Type = Graphics
			ChainedTo = Turret
			Location = [.5, 0]
			Rotation = 90d
			ResetAnimationTrigger = Turret

			OperationalDoodad
			{
				Layer = "weapons"
				DamageLevels
				[
					{
						AnimationFiles
						[
							//"barrel2.png"
							"barrel3.png"
							"barrel4.png"
							"barrel5.png"
							"barrel6.png"
							"barrel7.png"
							"barrel8.png"
							"barrel1.png"// Loop back to beginning and clamp there.
						]
						NormalsAnimationFiles
						[
							//"barrel_normals2.png"
							"barrel_normals3.png"
							"barrel_normals4.png"
							"barrel_normals5.png"
							"barrel_normals6.png"
							"barrel_normals7.png"
							"barrel_normals8.png"
							"barrel_normals1.png"
						]
						Size = [1, 5]
						AnimationInterval = 0.0625
						AnimationStartTime = MinValue
						ClampAnimation = true
					}
					{
						AnimationFiles
						[
							//"barrel2_33.png"
							"barrel3_33.png"
							"barrel4_33.png"
							"barrel5_33.png"
							"barrel6_33.png"
							"barrel7_33.png"
							"barrel8_33.png"
							"barrel1_33.png"// Loop back to beginning and clamp there.
						]
						NormalsAnimationFiles
						[
							//"barrel_normals2.png"
							"barrel_normals3.png"
							"barrel_normals4.png"
							"barrel_normals5.png"
							"barrel_normals6.png"
							"barrel_normals7.png"
							"barrel_normals8.png"
							"barrel_normals1.png"
						]
						Size = [1, 5]
						AnimationInterval = 0.0625
						AnimationStartTime = MinValue
						ClampAnimation = true
					}
					{
						AnimationFiles
						[
							//"barrel2_66.png"
							"barrel3_66.png"
							"barrel4_66.png"
							"barrel5_66.png"
							"barrel6_66.png"
							"barrel7_66.png"
							"barrel8_66.png"
							"barrel1_66.png"// Loop back to beginning and clamp there.
						]
						NormalsAnimationFiles
						[
							//"barrel_normals2.png"
							"barrel_normals3.png"
							"barrel_normals4.png"
							"barrel_normals5.png"
							"barrel_normals6.png"
							"barrel_normals7.png"
							"barrel_normals8.png"
							"barrel_normals1.png"
						]
						Size = [1, 5]
						AnimationInterval = 0.0625
						AnimationStartTime = MinValue
						ClampAnimation = true
					}
				]
			}
		}

		LoadedAmmoSprites
		{
			Type = ResourceSprites
			ChainedTo = Turret
			Location = [0.25, 0]
			Rotation = 90d
			ResourceStorage = LoadedAmmo
			Layer = "doodads_low"
			ResourceLevels
			[
				{
					File = "bullets1.png"
					Size = [1, 1]
				}
				{
					File = "bullets2.png"
					Size = [1, 1]
				}
				{
					File = "bullets3.png"
					Size = [1, 1]
				}
				{
					File = "bullets4.png"
					Size = [1, 1]
				}
			]
		}*/

		OperationEffects
		{
			Type = ToggleEffects
			Location = [.5, .5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/BigPartDestroyed
			Location = [.5, .5]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [.5, .5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of ammo.
				/*{
					Toggle = AmmoPrereq
					Delay = &~/Part/Components/Turret/FireInterval
					AtlasSprite
					{
						File = &/INDICATORS/NoAmmo
						Size = [1, 1]
					}
				}*/
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "icon.png"
			Size = [1, 1]
			//Offset = [0, -1]
		}
	}
}

BaseBulletEmitter 
{
	Type = BulletEmitter
	ChainedTo = EmitterSelfProxy
	FireTrigger = Turret
	GetTargetFrom = Turret
	Location = [0.5, 0]
	Rotation = -90d
	OperationalToggle = IsOperational
	Bullet = &<Bullets.rules>/Bullet0
	//Spread = [-2.5d, 2.5d]{ BaseValue=2; BuffType=JaniCRAM_BarrelMass; BuffMode=Add; }
	Spread = [{ BaseValue=-10d; BuffType=JaniCRAM_Accuraccy; BuffMode=Divide; }, { BaseValue=10d; BuffType=JaniCRAM_Accuraccy; BuffMode=Divide; }]
	ResourceStorage = LoadersAmmoStorage
	ResourcesUsed = 10
	Recoil = 80
}

BaseAmmoStorage
{
	Type = ResourceStorage
	ResourceType = bullet
	MaxResources = 100
	DelayBeforeReadyToUse = .25
	//AnticipateMoreResourcesFrom = ["AmmoStorage"]
	ToggleOnResources = 4
	ToggleOffResources = 3
	UITileRect = [1 + 7/64, .4 + 7/64, 1 - 14/64, 1 - 14/64]
	ReceiveResourceMediaEffects = &/COMMON_EFFECTS/AmmoLoad
	DropResourcesWhenDestroyed = true
	DropResourcesWhenRemoved = true
}