Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/FactorySplitter"
	IconNameKey = "Parts/FactorySplitterIcon"
	ID = baseresources.splitter_factory
	EditorGroup = "Production"
	DescriptionKey = "Parts/FactorySplitterDesc"
	Resources
	[
		[steel, 32]//800
		[coil, 8]//800
		[tristeel, 2]//400
	]
	Size = [2, 2]
	IsFlippable = true
	SelectionPriority = 1
	MaxHealth = 4000
	TypeCategories = [provides_split, uses_unsplit, uses_power]
	ReceivableBuffs : ^/0/ReceivableBuffs [Factory]
	AllowedDoorLocations
	[
		[-1, 1]
		[2, 1]
		[0, 2]
		[1, 2]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [64, 64]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 1
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 2000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Factory_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
		}
		
		//REMOVE
		
		SteelStorage
	{
		Type = TypedResourceGrid
		ResourceType = steel
		GridRect = [0, 1, 1, 1]
		Layer = "doodads_low"
		SpriteInset = [12/64, 4/64, 6/64, 11/64]
		SuppliesResources = true
		SuppliesResourcesToggle = MergeToggle
		SupplyToggleButtonOffset = [0, -.6]
	}
	SteelConsumer
	{
		Type = TypedResourceGridConsumer
		ResourceType = steel
		Storage = SteelStorage
		DefaultPriority = &/PRIORITIES/Factory_Supply
		OperationalToggle = SplitToggle
		ConsumptionToggleButtonOffset = [0, -.3]
	}
	InternalStorage
	{
		Type = ResourceStorage
		ResourceType = cut.steel
		MaxResources = 5
		StartingResources = 0
	}
	BarConsumer
	{
		Type = TypedResourceGridConsumer
		ResourceType = cut.steel
		Storage = BarStorage
		DefaultPriority = &/PRIORITIES/Factory_Supply
		OperationalToggle = MergeToggle
		ConsumptionToggleButtonOffset = [0, -.3]
	}
	BarStorage
	{
		Type = TypedResourceGrid
		ResourceType = cut.steel
		GridRect = [1, 1, 1, 1]
		Layer = "doodads_low"
		SpriteInset = [6/64, 4/64, 12/64, 11/64]
		SuppliesResources = true
		SuppliesResourcesToggle = SplitToggle
		SupplyToggleButtonOffset = [0, -.6]
	}

	ResourceConverterSplit
	{
		Type = ResourceConverter
		OperationalToggle = IsSplitToggle
		From
		[
			{
				Storage = SteelStorage
				Quantity = 1
			}
			{
				Storage = BatteryStorage
				Quantity = 10
				MinQuantityForConversion = 1
			}
		]
		ToStorage = InternalStorage
		ToQuantity = 5
		Interval = { BaseValue=0.5; BuffType=Factory; BuffMode=Divide; }
	}
	ResourceConverterSplitDeposit
	{
		Type = ResourceConverter
		OperationalToggle = IsSplitToggle
		From
		[
			{
				Storage = InternalStorage
				Quantity = 1
			}
		]
		ToStorage = BarStorage
		ToQuantity = 1
		Interval = { BaseValue=0.5/5; BuffType=Factory; BuffMode=Divide; }
	}
	
	
	ResourceConverterUnSplitCollect
	{
		Type = ResourceConverter
		OperationalToggle = IsMergeToggle
		From
		[
			{
				Storage = BarStorage
				Quantity = 1
			}
		]
		ToStorage = InternalStorage
		ToQuantity = 1
		Interval = { BaseValue=0.5/5; BuffType=Factory; BuffMode=Divide; }
	}
	ResourceConverterUnsplit
	{
		Type = ResourceConverter
		OperationalToggle = IsMergeToggle
		From
		[
			{
				Storage = InternalStorage
				Quantity = 5
			}
			{
				Storage = BatteryStorage
				Quantity = 10
				MinQuantityForConversion = 1
			}
		]
		ToStorage = SteelStorage
		ToQuantity = 1
		Interval = { BaseValue=0.5; BuffType=Factory; BuffMode=Divide; }
	}
		
		//REMOVE

		/*ConvertEffects
		{
			Type = TriggeredEffects
			Trigger = ResourceConverter
			Location = [1, 1]
			MediaEffects
			[
				: /BASE_SOUNDS/AudioInterior
				{
					Sound = "bullet_create.wav"
					Volume = .075
					SpeedVariation = .1
				}
			]
		}*/

		BuffProvider
		{
			Type = GridBuffProvider
			BuffType = Factory
			BuffAmount = 25%
			GridDistance = 1
			OperationalToggle = BatteryStorage
		}

		IdleDoodaddAndDamageLevels_Graphics
		{
			Type = Graphics
			Location = [1, 40/64]
			OperationalToggle = IsOperational
			DoodadToggle = ResourceConverter
			ToggleOffDoodad
			{
				Layer = "walls"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_idle1.png"
							"doodads_idle2.png"
							"doodads_idle3.png"
							"doodads_idle2.png"
						]
						Size = [2, 1]
						AnimationInterval = 0.125
						AnimationStartTime = WhenSpawned
					}
				]
			}
		}

		FloorSprite
		{
			Type = Sprite
			OnlyWithFlip = false
			Location = [1, 1]
			Layer = "floors"
			DamageLevels
			[
				{
					File = "floor.png"
					Size = [2, 2]
				}
				{
					File = "floor_33.png"
					Size = [2, 2]
				}
				{
					File = "floor_66.png"
					Size = [2, 2]
				}
			]
		}
		FloorSpriteFlipped
		{
			Type = Sprite
			OnlyWithFlip = true
			Location = [1, 1]
			Layer = "floors"
			DamageLevels
			[
				{
					File = "floor_flipped.png"
					Size = [2, 2]
				}
				{
					File = "floor_flipped_33.png"
					Size = [2, 2]
				}
				{
					File = "floor_flipped_66.png"
					Size = [2, 2]
				}
			]
		}

		Graphics
		{
			Type = Graphics
			Location = [1, 1]
			OperationalToggle = IsOperational
			AnimationToggle = ResourceConverter
			OperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, -24/64]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [2, 1]
						AnimationInterval = 0.0625
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, -24/64]
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [2, 1]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [2, 2]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [2, 2]
					}
					{
						File = "walls_33.png"
						Size = [2, 2]
					}
					{
						File = "walls_66.png"
						Size = [2, 2]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [2, 2]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [2, 2]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [2, 2]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				Offset = [0, 0.5]
				DamageLevels
				[
					{
						File = "roof_glows.png"
						Size = [2, 1]
					}
					{
						File = "roof_glows_33.png"
						Size = [2, 1]
					}
					{
						File = "roof_glows_66.png"
						Size = [2, 1]
					}
				]
			}
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				Offset = [0, 19/64]
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [3, 3]
						Z = 0.5 // Controls the "height" of the light for the purposes of normal mapping. Set to -1 (or any negative number) to disable normal lighting for this light.
						VertexColor = [255*1.5, 0, 0]
					}
				]
			}
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [0.625, 1]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [1, 1]
				}
				{
					File = "batteries2.png"
					Size = [1, 1]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [1, 1]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [1, 1]

			HitEffects
			[
				{
					Type = ExplosiveDamage
					TotalDamage = 40000
					Radius = 4
					Delay = .05
					FireChancePerNDamage = 100%
					NDamage = 1000
					CrewKillChance = 50%
					Filter
					{
						OperationalHealth = true
						StructuralHealth = false
						Friendlies = true
					}
				}
				{
					Type = ExplosiveDamage
					TotalDamage = 11250
					Radius = 3
					Delay = .05
					Filter
					{
						OperationalHealth = false
						StructuralHealth = true
						Friendlies = true
						Crew = false
					}
				}
			]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1, 1]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// No sulfur.
				{
					Toggle = SulfurSplitter
					AtlasSprite
					{
						File = &/INDICATORS/NoResource
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [2, 2]
		}
	}

	Stats
	{
		AmmoProduction = (&~/Part/Components/ResourceConverter/ToQuantity) / (&~/Part/Components/ResourceConverter/Interval/BaseValue)
		AmmoCapacity = (&~/Part/Components/AmmoStorage/GridRect/2) * (&~/Part/Components/AmmoStorage/GridRect/3) * (&<./Data/resources/bullet/bullet.rules>/MaxStackSize)
		SulfurCapacity = (&~/Part/Components/SulfurStorage/GridRect/2) * (&~/Part/Components/SulfurStorage/GridRect/3) * (&<./Data/resources/sulfur/sulfur.rules>/MaxStackSize)
		SulfurPerAmmo = (&~/Part/Components/SulfurSplitter/FromQuantity) / (&~/Part/Components/SulfurSplitter/ToQuantity) / (&~/Part/Components/ResourceConverter/ToQuantity)
		SulfurPerSecond = (&~/Part/Components/SulfurSplitter/FromQuantity) / (&~/Part/Components/SulfurSplitter/ToQuantity) / (&~/Part/Components/ResourceConverter/Interval/BaseValue)
		AmmoSulfurUsage = [&../SulfurPerAmmo, &../SulfurPerSecond]
		PowerPerAmmo = (&~/Part/Components/ResourceConverter/From/1/Quantity) / (&~/Part/Components/ResourceConverter/ToQuantity) / 1000
		PowerPerSecond = (&~/Part/Components/ResourceConverter/From/1/Quantity) / (&~/Part/Components/ResourceConverter/Interval/BaseValue) / 1000
		AmmoPowerUsage = [&../PowerPerAmmo, &../PowerPerSecond]
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000
		FactoryBuff = (&~/Part/Components/BuffProvider/BuffAmount) * 100

		RecPower = &PowerPerSecond
		RecCrew = (&RecPower) * 4
	}
}