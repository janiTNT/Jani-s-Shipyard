Resource = bullet
ResourceStorage = AmmoStorage
CarrySize = (&<./data/resources/bullet/bullet.rules>/MaxPerNugget)
LightColor = [255, 145, 27]
//CarrySize = 1
Components
{	
	ConvertPermission
	{
		Type = MultiToggle
		Toggles = [IsOperational, FromProxy, ChaingunPatch_CanFillAmmo]
		Mode = All
	}
	
	ChaingunPatch_CanFillAmmo //only fill ammo if the conveyor is not running in either direction
	{
		Type = MultiToggle
		Toggles = [ChaingunPatch_IsRequestingAmmoA, ChaingunPatch_IsRequestingAmmoB]
		Mode = None
	}

	//Magazines pass down ammo to the left or the right, if the part to the left or right is requesting ammo
	ChaingunPatch_IsRequestingAmmoA
	{
		Type = ToggleProxy
		PartLocation = [0, -1] //looking up.
		ProxyableComponents
		[
			{
				PartCriteria
				{
					Category = chaingun_ammo_requester //making sure they have the special category
				}
				ComponentID = IsRequestingRightToLeftAmmo //what component we are looking for.  Chain gun itself always has these components
			}
			{
				PartCriteria
				{
					Category = chaingun_ammo_requester //making sure they have the special category
				}
				ComponentID = IsRequestingLeftToRightAmmo //what component we are looking for.  Chain gun itself always has these components
			}
		]
	}
	
	ChaingunPatch_IsRequestingAmmoB
	{
		Type = ToggleProxy
		PartLocation = [0, -1] //looking up.
		ProxyableComponents
		[
			{
				PartCriteria
				{
					Category = chaingun_ammo_requester //making sure they have the special category
				}
				ComponentID = IsRequestingLeftToRightAmmo //what component we are looking for.  Chain gun itself always has these components
			}
			{
				PartCriteria
				{
					Category = chaingun_ammo_requester //making sure they have the special category
				}
				ComponentID = IsRequestingRightToLeftAmmo //what component we are looking for.  Chain gun itself always has these components
			}
		]
	}

	FromProxy
	{
		Type = ResourceStorageProxy
		ResourceType = &~/Resource
		PartLocation = [0, 1]
		//PartCriteria
		//{
		//	Category = thermal
		//}
		ComponentID = &~/ResourceStorage
		ToggleOnResources = (&~/CarrySize)
		ToggleOffResources = (&~/CarrySize) - 1
	}
	
	ToProxy
	{
		Type = ResourceStorageProxy
		ResourceType = &~/Resource
		PartLocation = [0, -1]
		//PartCriteria
		//{
		//	Category = thermal
		//}
		ComponentID = &~/ResourceStorage
	}
	
	ResourceConverter
	{
		Type = ResourceConverter
		OperationalToggle = ConvertPermission
		From
		[
			{
				Storage = FromProxy
				Quantity = (&~/CarrySize)
				MinQuantityForConversion = (&~/CarrySize)
			}
			{
				Storage = BatteryStorage
				Quantity = (&<hyperium.rules>/Components/ResourceConverter/From/1/Quantity)
				MinQuantityForConversion = 1
			}
		]
		To
		[
			{
				Storage = ToProxy
				Quantity = (&~/CarrySize)
				MinQuantityForConversion = (&~/CarrySize)
			}
		]
		//ToStorage = ToProxy
		//ToQuantity = 1
		Interval = (&<hyperium.rules>/Components/ResourceConverter/Interval)
	}
	
	Graphics
	{
		Type = Graphics
		Location = [.5, .5]
		OperationalToggle = IsOperational
		OperationalLighting
		{
			Layer = "lights_add"
			DamageLevels
			[
				{
					File = "lights.png"
					Size = [1, 1]
					VertexColor = &~/LightColor
				}
			]
		}
	}
}