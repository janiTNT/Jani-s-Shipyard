Resource = bullet
ResourceStorage = AmmoStorage
CarrySize = (&<./data/resources/bullet/bullet.rules>/MaxPerNugget)
LightColor = [255, 145, 27]
//CarrySize = 1
Components : &<hyperium.rules>/Components
{
	InsertPermission : &<hyperium.rules>/Components/InsertPermission
	{
		Toggles : &<hyperium.rules>/Components/InsertPermission/Toggles
		[
			{Toggle = ChaingunPatch_CanFillAmmo}
		]
	}
	
	HandStorage
	{
		Type = ResourceStorage
		ResourceType = &~/Resource
		MaxResources = (&~/CarrySize)
		InitToMaxResources = 0
		ToggleOnResources = (&~/CarrySize)
		ToggleOffResources = 0
	}
	
	ChaingunPatch_CanFillAmmo //only fill ammo if the conveyor is not running in either direction
	{
		Type = MultiToggle
		Toggles = [ChaingunPatch_IsRequestingAmmoA, ChaingunPatch_IsRequestingAmmoB, {Toggle = IsShellFullyClosed, Invert = true}]
		Mode = None
	}
	
	IsShellFullyClosed
	{
		Type = MultiToggle
		Toggles = [{Toggle = IsShellFullyClosedPresence, Invert = true}, IsShellFullyClosedProxy]
		Mode = Any
	}
	
	IsShellFullyClosedPresence//because IsOnWhenNotConnected is not working
	{
		Type = ComponentPresenceToggle
		PartLocation = [0, -1]
		ComponentID = IsShellFullyClosed
	}
	
	IsShellFullyClosedProxy
	{
		Type = ToggleProxy
		PartLocation = [0, -1] //looking up. :3
		ComponentID = IsShellFullyClosed
	}

	//Magazines pass down ammo to the left or the right, if the part to the left or right is requesting ammo
	ChaingunPatch_IsRequestingAmmoA
	{
		Type = ToggleProxy
		PartLocation = [0, -1] //looking up.
		ProxyableComponents
		[
			{
				PartCriteria
				{
					Category = chaingun_ammo_requester //making sure they have the special category
				}
				ComponentID = IsRequestingRightToLeftAmmo //what component we are looking for.  Chain gun itself always has these components
			}
			{
				PartCriteria
				{
					Category = chaingun_ammo_requester //making sure they have the special category
				}
				ComponentID = IsRequestingLeftToRightAmmo //what component we are looking for.  Chain gun itself always has these components
			}
		]
	}
	
	ChaingunPatch_IsRequestingAmmoB
	{
		Type = ToggleProxy
		PartLocation = [0, -1] //looking up.
		ProxyableComponents
		[
			{
				PartCriteria
				{
					Category = chaingun_ammo_requester //making sure they have the special category
				}
				ComponentID = IsRequestingLeftToRightAmmo //what component we are looking for.  Chain gun itself always has these components
			}
			{
				PartCriteria
				{
					Category = chaingun_ammo_requester //making sure they have the special category
				}
				ComponentID = IsRequestingRightToLeftAmmo //what component we are looking for.  Chain gun itself always has these components
			}
		]
	}
	
	FromProxy
	{
		Type = ResourceStorageProxy
		ResourceType = &~/Resource
		PartLocation = [0, 1]
		ProxyableComponents// btw part ID's are inside PartCategories
		[
			{
				PartCriteria
				{
					ExcludeCategories = [cosmoteer.chaingun]// NOT 
				}
				ComponentID = &~/ResourceStorage
			}
			{
				PartCriteria
				{
					Categories = [cosmoteer.chaingun]// YOS 
				}
				ComponentID = CombinedAmmoStorage //what component we are looking for.  Chain gun itself always has these components
			}
		]
	}
	
	ToProxy
	{
		Type = ResourceStorageProxy
		ResourceType = &~/Resource
		PartLocation = [0, -1]
		ProxyableComponents
		[
			{
				PartCriteria
				{
					ExcludeCategories = [cosmoteer.chaingun]// NOT 
				}
				ComponentID = &~/ResourceStorage
			}
			{
				PartCriteria
				{
					Categories = [cosmoteer.chaingun]// YOS 
				}
				ComponentID = CombinedAmmoStorage //what component we are looking for.  Chain gun itself always has these components
			}
		]
	}
	
	From_Into_Hand : &<hyperium.rules>/Components/From_Into_Hand
	{
		Interval = 1 / ((&/Simulation/PhysicsUpdatesPerSecond)*(&~/CarrySize))
	}
	
	Hand_Into_To : &<hyperium.rules>/Components/Hand_Into_To
	{
		Interval = 1 / ((&/Simulation/PhysicsUpdatesPerSecond)*(&~/CarrySize))
	}
	
	Graphics
	{
		Type = Graphics
		Location = [.5, .5]
		OperationalToggle = IsOperational
		OperationalLighting
		{
			Layer = "lights_add"
			DamageLevels
			[
				{
					File = "lights.png"
					Size = [1, 1]
					VertexColor = &~/LightColor
				}
			]
		}
	}
}