Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/InserterOreLong"
	IconNameKey = "Parts/InserterOreLongIcon"
	ID = janiTNT.OreInserter_long // Part IDs  somthing something
	EditorGroups = ["Production"]
	DescriptionKey = "Parts/InserterOreLongDesc"
	Resources
	[
		[steel, 16]
		[coil, 6]
	]
	//sus
	Size = [1, 1]
	MaxHealth = 1000
	IsFlippable = true
	IsRotateable = true
	TypeCategories = [Inserter, uses_power, Port_IN]
	ReceivableBuffs : ^/0/ReceivableBuffs [PowerportBuff]
	AllowedDoorLocations
	[
		[-1, 0]
		//[0, 1]
		[1, 0]
	]
	//IgnoreRotationForMirroredSelection = true
	EditorIcon
	{
		Texture
		{
			File = "Icon.png"
			SampleMode = Linear
		}
		Size = [32, 160]
	}
	Components : ^/0/Components
	{	
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 2//TROLLER
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 2000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		PortBuffToggle
		{
			Type = BuffToggle
			BuffType = PowerportBuff
		}
		ToggledBatteryConsumer
		{
			Type = ToggledComponents
			Toggle = PortBuffToggle
			Invert = true
			IncludeInBlueprints = true
			Components
			{
				BatteryConsumer
				{
					Type = ResourceConsumer
					ResourceType = battery
					Storage = BatteryStorage
					DefaultPriority = &/PRIORITIES/Factory_Supply
					ResupplyThreshold = 500
					OperationalToggle = PowerToggle
				}
			}
		}
		
		OreType
		{
			Type = UIToggle
			ToggleID = "resource_conveyor_mode_ore"
			Default = 0
			AlwaysAllowInBuildMode = true
			RequiresCommand = false
		}

		sulfurToggle
		{
			Type = ModeToggle
			Mode = OreType
			OnMode = 0
		}
		sulfurComponents
		{
			Type = ToggledComponents
			Toggle = sulfurToggle
			IncludeInBlueprints = true
			Components = &<sulfur.rules>/Components
		}
		
		ironToggle
		{
			Type = ModeToggle
			Mode = OreType
			OnMode = 1
		}
		ironComponents
		{
			Type = ToggledComponents
			Toggle = ironToggle
			IncludeInBlueprints = true
			Components = &<iron.rules>/Components
		}
		
		copperToggle
		{
			Type = ModeToggle
			Mode = OreType
			OnMode = 2
		}
		copperComponents
		{
			Type = ToggledComponents
			Toggle = copperToggle
			IncludeInBlueprints = true
			Components = &<copper.rules>/Components
		}
		
		tritaniumToggle
		{
			Type = ModeToggle
			Mode = OreType
			OnMode = 3
		}
		tritaniumComponents
		{
			Type = ToggledComponents
			Toggle = tritaniumToggle
			IncludeInBlueprints = true
			Components = &<tritanium.rules>/Components
		}
		
		carbonToggle
		{
			Type = ModeToggle
			Mode = OreType
			OnMode = 4
		}
		carbonComponents
		{
			Type = ToggledComponents
			Toggle = carbonToggle
			IncludeInBlueprints = true
			Components = &<carbon.rules>/Components
		}
		
		goldToggle
		{
			Type = ModeToggle
			Mode = OreType
			OnMode = 5
		}
		goldComponents
		{
			Type = ToggledComponents
			Toggle = goldToggle
			IncludeInBlueprints = true
			Components = &<gold.rules>/Components
		}
		
		uraniumToggle
		{
			Type = ModeToggle
			Mode = OreType
			OnMode = 6
		}
		uraniumComponents
		{
			Type = ToggledComponents
			Toggle = uraniumToggle
			IncludeInBlueprints = true
			Components = &<uranium.rules>/Components
		}
		
		ConvertProxy
		{
			Type = ToggleProxy
			ComponentID = ResourceConverter
		}
		
		ConvertProxy2
		{
			Type = TriggerProxy
			ComponentID = ResourceConverter
		}
		
		ConvertEffects
		{
			Type = TriggeredEffects
			Trigger = ConvertProxy2
			Location = [.5, .5]
			MediaEffects = &/COMMON_EFFECTS/AmmoDeliver
		}
		
		ArmGraphics
		{
			Type = Graphics
			//ChainedTo = Turret
			Location = [.5, .5]
			//Rotation = 90d
			Layer = "fire"
			ResetAnimationTrigger = ConvertProxy2
			OperationalDoodad
			{
				Layer = "fire"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"arm2.png"
							"arm3.png"
							"arm4.png"
							"arm5.png"
							"arm6.png"
							"arm7.png"
							"arm8.png"
							"arm9.png"
							"arm9.png"
							"arm8.png"
							"arm7.png"
							"arm6.png"
							"arm5.png"
							"arm4.png"
							"arm3.png"
							"arm2.png"
							"arm1.png"// Loop back to beginning and clamp there.
						]
						Size = [1, 5]
						AnimationInterval = 0.0515 //0.0745 * 0.75
						AnimationStartTime = MinValue
						ClampAnimation = true
					}
				]
			}
		}
		
		BaseGraphics
		{
			Type = Graphics
			Location = [0.5, 0.5]
			Floor // This is needed so that armor shows up in ship ghosts.
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 1]
					}
				]
			}
			Walls // This is needed so that armor shows up in ship ghosts.
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 1]
					}
				]
			}
			Roof = &<./Data/ships/terran/fire_extinguisher/fire_extinguisher.rules>/Part/Components/Graphics/Roof
		}
		
		BatterySprites
		{
			Type = ResourceSprites
			Location = [.5, .5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_low"
			ResourceLevels = &<../Inserter/Inserter.rules>/Part/Components/BatterySprites/ResourceLevels
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/SmallPartDestroyedDry
			Location = [.5, .5]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "bp.png"
			Size = [1, 1]
		}
	}

	Stats
	{
		InserterPowerUsage = [&../PowerPerTransfer, &../PowerPerSecond]
		PowerPerTransfer = (&<hyperium.rules>/Components/ResourceConverter/From/1/Quantity) / 1000
		PowerPerSecond = (&<hyperium.rules>/Components/ResourceConverter/From/1/Quantity) / (&<hyperium.rules>/Components/ResourceConverter/Interval) / 1000
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = &PowerPerSecond
		RecCrew = (&RecPower) * 4
	//	EMPResist = (&~/Part/Components/EmpAbsorber/AbsorbsResourceDrain) / 1000
	//	HeatUsageContinuous = (&~/Part/Components/HeatDrain/FromQuantity) / (&~/Part/Components/HeatDrain/Interval) / 1000
	}
}