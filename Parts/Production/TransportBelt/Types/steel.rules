Resource = steel
ResourceStorage = SteelStorage
CarrySize = (&<./data/resources/steel/steel.rules>/MaxPerNugget)
Components : &<base.rules>/Components
{	
	ConvertPermission
	{
		Type = MultiToggle
		Toggles
		[
			{Toggle = IsOperational}
			{Toggle = ToProxyValue}
			{Toggle = SteelStorage}
			{Toggle = CooledDownToggle}
		]
		Mode = All
	}
	
	ToProxyValue
	{
		Type = ThresholdToggle
		ValueFrom = ToProxy
		MinAmount = 1
		MaxAmount = 1
		Invert = true
	}
	
	SteelStorage
	{
		Type = ResourceStorage
		ResourceType = &~/Resource
		MaxResources = (&~/CarrySize)
		InitToMaxResources = 0
		//ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		ToggleOnResources = 1
		ToggleOffResources = 0
		DelayBeforeReadyToUse = .75 / 2
	}
	
	ToProxy
	{
		Type = ResourceStorageProxy
		ResourceType = &~/Resource
		PartLocation = [0, -1]
		PartCriteria
		{
			Category = ResourceBelt
		}
		ComponentID = &~/ResourceStorage
		ToggleOnResources = (&~/CarrySize)
		ToggleOffResources = (&~/CarrySize) - 1
	}
	
	ResourceConverter : &<base.rules>/Components/ResourceConverter
	{
		From
		[
			{
				Storage = SteelStorage
				Quantity = 1
				MinQuantityForConversion = 1
			}
		]
		To
		[
			{
				Storage = ToProxy
				Quantity = 1
				MinQuantityForConversion = 1
			}
		]
		Interval = 1 / ((&/Simulation/PhysicsUpdatesPerSecond)*(&~/CarrySize))
	}
	
	ResetSprite
	{
		Type = ToggleTrigger
		Toggle = SteelStorage
		TriggerWhenOff = false
		TriggerWhenOn = true
	}
	
	CapableTween
	{
		Type = ValueTween
		OffValue = 0
		OnValue = 1
		OnTweenDuration = .75 - (1 / (&/Simulation/PhysicsUpdatesPerSecond))
		OffTweenDuration = .1
		IsOnToggle = SteelStorage
	}
	
	CooledDownToggle
	{
		Type = ThresholdToggle
		ValueFrom = CapableTween
		MinAmount = 1
		MaxAmount = 1
	}
	
	ResourceSprite : &<base.rules>/Components/ResourceSprite
	{
		OperationalToggle = SteelStorage
		OperationalLighting
		{
			Layer = "doodads_high"
			DamageLevels
			[
				{
					AnimationFiles
					[
						"../empty_sprite.png"
						"./data/resources/steel/Steel5.png"
					]
					Size = [1, 1]
					AnimationInterval = .75 - (1 / (&/Simulation/PhysicsUpdatesPerSecond))
					AnimationStartTime = WhenSpawned
					ClampAnimation = true
				}
			]
		}
	}
	
	Graphics2: &<base.rules>/Components/Graphics2
	{
		OperationalLighting
		{
			Layer = "doodads_high"
			DamageLevels
			[
				{
					File = "./data/resources/steel/Steel5.png"
					Size = [1, 1]
				}
			]
		}
	}
}