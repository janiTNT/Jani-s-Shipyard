Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/Radiator"
	IconNameKey = "Parts/RadiatorIcon"
	ID = janiTNT.radiator // Part IDs  somthing something
	OtherIDs = [JuanTNT.radiator]//Heh.
	EditorGroups = ["Power"]
	DescriptionKey = "Parts/RadiatorDesc"
	Resources
	[
		[steel, 6]
	]
	//sus
	Size = [1, 1]
	MaxHealth = 1000
	Flammable = false
	CrewSpeedFactor = 0
	IsRotateable = true
	TypeCategories = [thermal]
	IsWalled = true
	ReceivableBuffs = [Heat_Proxy]
	AllowedDoorLocations = []
	GeneratorRequiresDoor = false
	IgnoreRotationForMirroredSelection = true
	EditorIcon
	{
		Texture
		{
			File = "Icon.png"
			SampleMode = Linear
		}
		Size = [32, 32]
	}
	Components : ^/0/Components
	{
		EmpAbsorber
		{
			Type = ExplosiveResourceDrainSink
			ResourceType = battery
			AbsorbsResourceDrain = 500
			RecoveryRate = (&AbsorbsResourceDrain) * 0.1
		}
		//code too perfect, cant learn how to improve/ change the way i want
		
		AmmoProxy
		{
			Type = ResourceStorageProxy
			ResourceType = heat
			PartLocation = [0, -1]
			PartCriteria
			{
				Category = thermal
			}
			ComponentID = ThermalStorage
		}
		AmmoProxy2 : &AmmoProxy
		{
			PartLocation = [-1, 0]
		}
		
		AmmoProxy3 : &AmmoProxy
		{
			PartLocation = [1, 0]
		}
		
		AmmoProxy4 : &AmmoProxy
		{
			PartLocation = [0, 1]
		}
		
		CombinedThermalStorage
		{
			Type = MultiResourceStorage
			ResourceType = heat
			ResourceStorages = [ThermalStorage, AmmoProxy, AmmoProxy2, AmmoProxy3, AmmoProxy4]
			AddMode = PrioritizeLeastResources
			RemoveMode = PrioritizeMostResources
			DropResourcesWhenDestroyed = false
			DropResourcesWhenRemoved = false
		}
		
		HeatSpreader
		{
			Type = ResourceConverter
			FromStorage = CombinedThermalStorage
			ToStorage = CombinedThermalStorage
			FromQuantity = 250
			ToQuantity = 250
			Interval = .5
		}
		ThermalStorage
		{
			Type = ResourceStorage
			ResourceType = heat
			MaxResources = 8000
			SuppliesResources = false
			StartingResources = 0
			InitToMaxResources = 0
			InitToMaxResourcesPVP = 0
			DropResourcesWhenDestroyed = false
			DropResourcesWhenRemoved = false
		}
		HeatDrain
		{
			Type = ResourceConverter
			OperationalToggle = ThermalStorage
			FromStorage = ThermalStorage
			FromQuantity = 50
			MinFromQuantityForConversion = 1
			Interval = 0.5
		}

		HeatSprites
		{
			Type = ResourceSprites
			Location = [.5, .5]
			ResourceStorage = ThermalStorage
			Layer = "lights_add"
			ResourceLevels
			[
				{
					File = "heat1.png"
					Size = [1, 1]
				}
				{
					File = "heat2.png"
					Size = [1, 1]
				}
				{
					File = "heat3.png"
					Size = [1, 1]
				}
				{
					File = "heat4.png"
					Size = [1, 1]
				}
				{
					File = "heat5.png"
					Size = [1, 1]
				}
				{
					File = "heat6.png"
					Size = [1, 1]
				}
				{
					File = "heat7.png"
					Size = [1, 1]
				}
				{
					File = "heat8.png"
					Size = [1, 1]
				}
			]
		}
		HeatSprites2
		{
			Type = ResourceSprites
			Location = [.5, .5]
			ResourceStorage = ThermalStorage
			Layer = "roof_lights_fancy"
			RangeLow = 1500
			RangeHigh = 8000
			ResourceLevels
			[
				{
					File = "./Data/ships/common/light_blob.png"
					Size = [1.3, 1.3]
					Z = 0.5 // Controls the "height" of the light for the purposes of normal mapping.
					VertexColor = [255*0.1, 128*0.1, 0*0.1]
				}
				{
					File = "./Data/ships/common/light_blob.png"
					Size = [1.6, 1.6]
					Z = 0.5 // Controls the "height" of the light for the purposes of normal mapping.
					VertexColor = [255*0.2, 128*0.2, 0*0.2]
				}
				{
					File = "./Data/ships/common/light_blob.png"
					Size = [1.75, 1.75]
					Z = 0.5 // Controls the "height" of the light for the purposes of normal mapping.
					VertexColor = [255*0.4, 128*0.4, 0*0.4]
				}
				{
					File = "./Data/ships/common/light_blob.png"
					Size = [2, 2]
					Z = 0.5 // Controls the "height" of the light for the purposes of normal mapping.
					VertexColor = [255*0.6, 128*0.6, 0*0.6]
				}
				{
					File = "./Data/ships/common/light_blob.png"
					Size = [2.5, 2.5]
					Z = 0.5 // Controls the "height" of the light for the purposes of normal mapping.
					VertexColor = [255*0.9, 128*0.9, 0*0.9]
				}
				{
					File = "./Data/ships/common/light_blob.png"
					Size = [3, 3]
					Z = 0.5 // Controls the "height" of the light for the purposes of normal mapping.
					VertexColor = [255*1.0, 128*1.0, 0*1.0]
				}
			]
		}
		
		Graphics
		{
			Type = Graphics
			Location = [0.5, 0.5]
			Floor // This is needed so that armor shows up in ship ghosts.
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "radiator.png"
						Size = [1, 1]
					}
				]
			}
			Roof = &<./Data/ships/terran/corridor/corridor.rules>/Part/Components/Graphics/Roof
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/SmallPartDestroyedDry
			Location = [.5, .5]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 1]
		}
	}

	Stats
	{
		EMPResist = (&~/Part/Components/EmpAbsorber/AbsorbsResourceDrain) / 1000
		HeatUsageContinuous = (&~/Part/Components/HeatDrain/FromQuantity) / (&~/Part/Components/HeatDrain/Interval) / 1000
	}
}