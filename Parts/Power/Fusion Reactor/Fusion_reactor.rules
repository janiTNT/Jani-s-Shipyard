Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/FusionReactorLarge"
	IconNameKey = "Parts/FusionReactorLargeIcon"
	ID = janiTNT.FusionReactorLarge // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	OtherIDs = [juanTNT.FusionReactor6x6]//heh.
	EditorGroup = "Power"
	DescriptionKey = "Parts/FusionReactorLargeDesc"
	Resources
	[
		[steel, 160]//4000
		[coil2, 160]// 48000
		[goldium, 64] // 48000
		//100,000
	]
	AIValueFactor = 5
	Size = [6, 6]
	SelectionPriority = 1
	CrewSpeedFactor = 1
	SelectionTypeID = "reactors"
	CrewCongestedSpeedFactor = .5
	ReceivableBuffs : ^/0/ReceivableBuffs []
	MaxHealth = 8000
	TypeCategories = [uses_power, thermal, provides_power, bounty_objective, power_transmitter]
	ForceManhattanPathInPart = true
	BlockedTravelCells
	[
		[1, 1]
		[1, 2]
		[1, 3]
		[1, 4]
		[2, 1]
		[2, 2]
		[2, 3]
		[2, 4]
		[3, 1]
		[3, 2]
		[3, 3]
		[3, 4]
		[4, 1]
		[4, 2]
		[4, 3]
		[4, 4]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [90, 90]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles
			[
				{Toggle = PowerToggle}
				{Toggle = ThermalStorage, invert = true}
				{Toggle = BatteryStorage}
			]
			Mode = All
		}
		
		IsProducing
		{
			Type = MultiToggle
			Toggles = [IsOperational, PlasmaStorage]
			Mode = All
		}
		
		BuffProvider
		{
			Type = GridBuffProvider
			BuffType = Heat_Proxy
			BuffAmount = 100%
			GridDistance = 1
		}
		
		CombinedThermalStorage
		{
			Type = MultiResourceStorage
			ResourceType = heat
			ResourceStorages = [ThermalStorage]
			ViaBuffs
			{
				OutgoingBuffProviders = [BuffProvider]
				ComponentID = ThermalStorage
			}
			AddMode = PrioritizeLeastResources
			DropResourcesWhenDestroyed = false
			DropResourcesWhenRemoved = false
		}
		
		HeatSpreader
		{
			Type = ResourceConverter
			From
			[
				{
					Storage = ThermalStorage
					Quantity = 1000
				}
				{
					Storage = CombinedThermalStorage
					Quantity = 1000
				}
			]
			ToStorage = CombinedThermalStorage
			ToQuantity = 2000
			Interval = .2
		}
		
		ThermalStorage
		{
			Type = ResourceStorage
			ResourceType = heat
			MaxResources = 8000
			ToggleOnResources = 7500
			ToggleOffResources = 6000
			SuppliesResources = false
			StartingResources = 0
			InitToMaxResources = 0
			InitToMaxResourcesPVP = 0
			DropResourcesWhenDestroyed = false
			DropResourcesWhenRemoved = false
		}
		
		ThermalProgressBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = ThermalStorage
			LowColor = [255, 0, 40]
			HighColor = [255, 100, 100]
			FullColor = [255, 0, 0]
			Height = 25
		}
		
		PlasmaProgressBar
		{
			Type = ProgressBar
			OperationalToggle = IsOperational
			ShowProgressFor = PlasmaStorage
			LowColor = [80, 25, 128]
			HighColor = [190, 50, 255]
			FullColor = [190, 130, 255]
			Height = 10
		}
		
		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
		}
		
		TurnOffRefeeding
		{
			Type = MultiToggle
			Toggles = [PlasmaStorage]
			Mode = All
			Invert = true
		}
		
//		NotProducing
//		{
//			Type = MultiToggle
//			Toggles = [IsProducing]
//			Mode = All
//			Invert = true
//	}

		HyperiumStorage
		{
			Type = TypedResourceGrid
			ResourceType = hyperium
			GridRect = [0, 0, 6, 6]
			DisableCells
			[
//				[0, 0]
				[0, 1]
				[0, 2]
				[0, 3]
				[0, 4]
//				[0, 5]
			
				[1, 0]
				[1, 1]
				[1, 2]
				[1, 3]
				[1, 4]
				[1, 5]
				
				[2, 0]
				[2, 1]
				[2, 2]//OH GOD KILL ME KILL ME KILL AAHHHHH I'M IN HORRIBLE PAIN I HATE LIFE
				[2, 3]
				[2, 4]
				[2, 5]
				
				[3, 0]
				[3, 1]//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
				[3, 2]
				[3, 3]
				[3, 4]
				[3, 5]
				
				[4, 0]
				[4, 1]
				[4, 2]
				[4, 3]
				[4, 4]
				[4, 5]
				
//				[5, 0]
				[5, 1]
				[5, 2]
				[5, 3]
				[5, 4]
//				[5, 5]
				//Hey i managed to do all of it! hooray!
			]
			Layer = "doodads_low"
			SpriteInset = [20/64, 20/64, 20/64, 20/64]
		}
		HyperiumConsumer
		{
			Type = TypedResourceGridConsumer
			ResourceType = hyperium
			Storage = HyperiumStorage
			DefaultPriority = &/PRIORITIES/Ftl_Supply
			OperationalToggle = PowerToggle
			ConsumptionToggleButtonOffset = [0, -.4]
		}
		HyperiumSplitter
		{
		    Type = InlineResourceConverter
		    ResourceType = hyperium
		    FromStorage = HyperiumStorage
		    FromQuantity = 1
		    ToQuantity = 800
		}
		
		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 192000 // 64000
			StartingResources = 0
			SuppliesResources = true
			MinResourcesPickUp = 6000
			MaxResourcesPickUp = 6000
			InitPickUp = 4001
			PickUpRate = 1000 / 2.0
			ExpectedResourceGenerationRate = 12000 / (&../BatteryProducer/Interval)
			ExpectedResourceGenerationToggle = IsProducing
			SuppliesResourcesToggle = IsProducing
			IsIntermediateStorage = true
			ToggleOnResources = 12001
			ToggleOffResources = 12000
			DropResourcesWhenDestroyed = false
			DropResourcesWhenRemoved = false
		}
		//0 ammo = off
		//toggleon = invert, make false
		//if below 1000 invert again and make it supply again
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Factory_Supply
			ResupplyThreshold = 64000
			OperationalToggle = TurnOffRefeeding
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		
		PlasmaStorage
		{
			Type = ResourceStorage
			ResourceType = plasma
			MaxResources = 8000
			ToggleOnResources = 6000
			ToggleOffResources = 0
			StartingResources = 0
			InitToMaxResources = 5000
			InitToMaxResourcesPVP = 5000
			DropResourcesWhenDestroyed = false
			DropResourcesWhenRemoved = false
		}
		
		PlasmaProducer
		{
			Type = ResourceConverter
			OperationalToggle = IsOperational
			From
			[
				{
					Storage = BatteryStorage
					Quantity = 1000
				}
				{
					Storage = HyperiumSplitter
					Quantity = 1
				}
			]
			To
			[
				{
					Storage = ThermalStorage
					Quantity = 100
				}
				{
					Storage = PlasmaStorage
					Quantity = 25
				}
			]
			MinFromQuantityForConversion = 1000
			//PLEASE EDIT FOR STATS
			
			//heat = 1000 per second
			
			//ALSO EDIT EXPECTED AMMO GEN 
			Interval = .1
		}
		
		BatteryProducer
		{
			Type = ResourceConverter
			OperationalToggle = PlasmaStorage
			From
			[
				{
					Storage = PlasmaStorage
					Quantity = 10
					MinQuantityForConversion = 1
				}
			]
			To
			[
				{
					Storage = BatteryStorage
					Quantity = 12000
				}
				{
					Storage = ThermalStorage
					Quantity = 100
					//DAMM BRO THATS
				}
			]
			MinFromQuantityForConversion = 1000
			//PLEASE EDIT FOR STATS
			
			//heat = 2000 per second
			
			//ALSO EDIT EXPECTED AMMO GEN 
			Interval = .1
		}
		
		PermanentPlasmaDrain
		{
			Type = ResourceConverter
//			OperationalToggle = PlasmaStorage
			From
			[
				{
					Storage = PlasmaStorage
					Quantity = 2
					MinQuantityForConversion = 1
				}
			]
			To
			[
				{
					Storage = ThermalStorage
					Quantity = 10
					//DAMM BRO THATS
				}
			]
			//MinFromQuantityForConversion = 1000
			//PLEASE EDIT FOR STATS
			
			//heat = 2000 per second
			
			//ALSO EDIT EXPECTED AMMO GEN 
			Interval = .1
		}
		Graphics
		{
			Type = Graphics
			Location = [3, 3]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [6, 6]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [6, 6]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "doodads.png"
						Size = [6, 6]
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "doodads.png"
						Size = [6, 6]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [6, 6]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [6, 6]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				DamageLevels
				[
					{
						File = "roof_glows.png"
						Size = [6, 6]
					}
				]
			}
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				DamageLevels
				[
					{
						File = "light_blob_stripes.png"
						RotSpeed = 360d
						Size = [18, 18]
						Z = 5.5 // Controls the "height" of the light for the purposes of normal mapping.
						VertexColor = [74*1.4,118*1.4, 255*1.4]
					}
				]
			}
		}
		PlasmaSprites
		{
			Type = ResourceSprites
			Location = [3, 3]
			ResourceStorage = PlasmaStorage
			Layer = "doodads_low"
			//HasZeroAmmoSprite = true
			ResourceLevels
			[
				{
					File = "plasma1.png"
					Size = [6, 6]
					RotSpeed = 90d
				}
				{
					File = "plasma2.png"
					Size = [6, 6]
					RotSpeed = 120d
				}
				{
					File = "plasma3.png"
					Size = [6, 6]
					RotSpeed = 180d
				}
				{
					File = "plasma4.png"
					Size = [6, 6]
					RotSpeed = 270d
				}
				{
					File = "plasma5.png"
					Size = [6, 6]
					RotSpeed = 360d
				}
				{
					File = "plasma6.png"
					Size = [6, 6]
					RotSpeed = 720d
				}
				{
					File = "plasma7.png"
					Size = [6, 6]
					RotSpeed = 1080d
				}
				{
					File = "plasma8.png"
					Size = [6, 6]
					RotSpeed = 1330d
				}
				{
					File = "plasma9.png"
					Size = [6, 6]
					RotSpeed = 1800d
				}
				{
					File = "plasma10.png"
					Size = [6, 6]
					RotSpeed = 1900d
				}
				{
					File = "plasma11.png"
					Size = [6, 6]
					RotSpeed = 2000d
				}
			]
		}
		CoreSprites
		{
			Type = ResourceSprites
			Location = [3, 3]
			ResourceStorage = PlasmaStorage
			Layer = "doodads_low"
			HasZeroResourceSprite = true
			ResourceLevels
			[
				{
					File = "Core_off.png"
					Size = [6, 6]
				}
				{
					File = "Core_on.png"
					Size = [6, 6]
					RotSpeed = 30d
				}
				{
					File = "Core_on.png"
					Size = [6, 6]
					RotSpeed = 90d
				}
				{
					File = "Core_on.png"
					Size = [6, 6]
					RotSpeed = 180d
				}
				{
					File = "Core_on.png"
					Size = [6, 6]
					RotSpeed = 360d
				}
				{
					File = "Core_on.png"
					Size = [6, 6]
					RotSpeed = 720d
				}
				{
					File = "Core_on.png"
					Size = [6, 6]
					RotSpeed = 1080d
				}
			]
		}
		BatterySprites1
		{
			Type = ResourceSprites
			Location = [1.5, 1.5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_low"
			RangeLow = 0
			RangeHigh = 24000
			ResourceLevels
			[
				{
					File = "battery1.png"
					Size = [3, 3]
				}
				{
					File = "battery2.png"
					Size = [3, 3]
				}
				{
					File = "battery3.png"
					Size = [3, 3]
				}
				{
					File = "battery4.png"
					Size = [3, 3]
				}
			]
		}
		BatterySprites2 : BatterySprites1
		{
			Location = [4.5, 1.5]
			Rotation = 90d
			RangeLow = 24000
			RangeHigh = 48000
		}
		BatterySprites5 : BatterySprites1
		{
			Location = [4.5, 4.5]
			Rotation = 180d
			RangeLow = 48000 
			RangeHigh = 48000 +  24000
		}
		BatterySprites7 : BatterySprites1
		{
			Location = [1.5, 4.5]
			Rotation = 270d
			RangeLow = 48000 +  24000
			RangeHigh = 96000
		}
		DestroyedEffects
		{
			Type = DeathEffects
			Location = [3, 3]
			IncludeWhenUnderConstruction = false
			
			FactorMediaEffectsWith = PlasmaStorage
			MediaEffects : &/JANI_COMMON/RadExplodeBig
			[
				&<./Data/ships/terran/reactor_large/particles/reactor_explode_flash_large.rules>
				&<./Data/common_effects/particles/explosions/big_part_explode_debris.rules>
				&<./Data/common_effects/particles/explosions/huge_part_explode_smoke.rules>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "./Data/ships/terran/reactor_small/destroyed.wav"
					Volume = 2
					Speed = .2
					SpeedVariation = .25 * (&Speed)
				}

				: /BASE_SHAKE
				{
					ShakeAmount = 80
					Duration = 5
				}
			]
			
			
			FactorHitEffectsWith = PlasmaStorage
			HitEffects
			[
				{
					Type = ExplosiveDamage
					TotalDamage = 4000000
					Radius = 75
					Delay = 0.5
					ExpandDuration = 2
					ExpandStartRadius = 1
					ExpandLoss = 100%
					FireChancePerNDamage = 50%
					ImpulsePerNDamage = 10
					NDamage = 1000
					Filter
					{
						OperationalHealth = true
						StructuralHealth = false
						Friendlies = true
					}
				}
				{
					Type = ExplosiveDamage
					TotalDamage = 700000
					Radius = 50
					Delay = 1
					ExpandDuration = 2
					ExpandStartRadius = 2
					ExpandLoss = 100%
					ImpulsePerNDamage = 5
					NDamage = 1000
					Filter
					{
						OperationalHealth = false
						StructuralHealth = true
						Friendlies = true
					}
				}
			]
		}
		DestroyedEffects2 // A separate destroyed effects for the base destruction that doesn't get scale with ammo.
		{
			Type = DeathEffects
			Location = [3, 3]
			MediaEffects = &/COMMON_EFFECTS/BigPartDestroyed
		}
		OverheatTrigger
		{
			Type = ThresholdTrigger
			AmountFrom = ThermalStorage
			MinAmount = .94
		}
		OverheatDeathEffects
		{
			Type = TriggeredEffects
			Trigger = OverheatTrigger
			Location = [3, 3]
			FactorMediaEffectsIntensityWith = PlasmaStorage
			FactorHitEffectsWith = PlasmaStorage
			MediaEffects : &/JANI_COMMON/RadExplodeBig
			[
				&<./Data/ships/terran/reactor_large/particles/reactor_explode_flash_large.rules>
				&<./Data/common_effects/particles/explosions/big_part_explode_debris.rules>
				&<./Data/common_effects/particles/explosions/huge_part_explode_smoke.rules>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "./Data/ships/terran/reactor_small/destroyed.wav"
					Volume = 2
					Speed = .2
					SpeedVariation = .25 * (&Speed)
				}

				: /BASE_SHAKE
				{
					ShakeAmount = 80
					Duration = 5
				}
			]
			HitEffects
			[
				{
					Type = Damage
					Damage = 999999
					Filter
					{
						Friendlies = true
						IgnoreInvulnerability = true
					}
				}
				{
					Type = ExplosiveDamage
					TotalDamage = 5000000
					Radius = 125
					//StrongerExplode
					Delay = 0.2
					ExpandDuration = 2
					ExpandStartRadius = 1
					ExpandLoss = 100%
					FireChancePerNDamage = 50%
					ImpulsePerNDamage = 10
					NDamage = 1000
					Filter
					{
						OperationalHealth = true
						StructuralHealth = false
						Friendlies = true
					}
				}
				{
					Type = ExplosiveDamage
					TotalDamage = 300000
					Radius = 50
					Delay = .5
					ExpandDuration = 2
					ExpandStartRadius = 2
					ExpandLoss = 100%
					ImpulsePerNDamage = 5
					NDamage = 1000
					Filter
					{
						OperationalHealth = false
						StructuralHealth = true
						Friendlies = true
					}
				}
			]
		}
		Blueprints
		{
			Type = BlueprintSprite
			File = "./Data/ships/terran/reactor_large/blueprints.png"
			Size = [6, 6]
		}
		ReactorHum
		{
			Type = ContinuousEffects
			Location = [3, 3]
			OperationalToggle = PowerToggle
			FactorMediaEffectsIntensityWith = PlasmaStorage
			MediaEffects
			[
				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "operating.wav"
					Volume = .5
					Speed = 0.9
					//SpeedVariation = .1
					MaxConcurrent = 0
					VolumeOverIntensity = 1
					SpeedOverIntensity = [0, 1]
					DynamicVolume : ^/0/DynamicVolume
					{
						ExteriorVolume = .5
					}
				}
			]
		}
		Indicators
		{
			Type = IndicatorSprites
			Location = [3, 3]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}
				
				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}

				// No hyperium.
				{
					Toggle = HyperiumStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoResource
						Size = [1, 1]
					}
				}
			]
		}
	}
	Stats
	{
		PowerGeneration = 12000 / (&~/Part/Components/BatteryProducer/Interval) / 1000
		BatterySize = (&~/Part/Components/BatteryStorage/MaxResourcesPickUp) / 1000
		BatteryFillTime = 1000 / (&~/Part/Components/BatteryStorage/PickUpRate)
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000
		HeatGeneration = 2100 * .001 //.01 * (&~/Part/Components/BatteryProducer/To/1/Quantity) + .01 * (&~/Part/Components/PlasmaProducer/To/1/Quantity) / (&~/Part/Components/BatteryProducer/Interval)
	}
}