Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/ReactorAux"
	IconNameKey = "Parts/ReactorAuxIcon"
	ID = janiTNT.reactor_Aux // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	OtherIDs = [juanTNT.reactor_Aux]//Heh.
	EditorGroup = "Power"
	DescriptionKey = "Parts/ReactorAuxDesc"
	Cost = 4500
	Resources
	[
		[steel, 20]//400
		[coil, 20]//1600
		[enriched_uranium, 1]//2000
	]
	CrewSpeedFactor = .8
	CrewCongestedSpeedFactor = 0.75
	AIValueFactor = 3
	Size = [1, 1]
	SelectionPriority = 0
	SelectionTypeID = "reactors"
	MaxHealth = 1000
	AutoDoorMaxPathLength = 3
	TypeCategories = [provides_power, reactor]
	ReceivableBuffs : ^/0/ReceivableBuffs [ElectronDebuff, ElectronNebula]
	CreatePartPerTileWhenDestroyed = ""
	Density = 1
	IgnoreRotationForMirroredSelection = true
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [30, 30]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [ElectronDebuffToggle]
			Mode = None
		}
		
		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 2000
			StartingResources = &MaxResources
			SuppliesResources = true
			MinResourcesPickUp = 500
			MaxResourcesPickUp = 500
			ExpectedResourceGenerationRate = (&../BatteryProducer/ToQuantity) / (&../BatteryProducer/Interval)
			ToggleOnResources = 501
			ToggleOffResources = 500
		}
		BatteryProducer
		{
			Type = ResourceConverter
			ToStorage = BatteryStorage
			ToQuantity = 500
			Interval = 1.85
			OperationalToggle = IsOperational
		}
		ElectronDebuffToggle
		{
			Type = BuffToggle
			BuffType = ElectronDebuff
		}

		ElectronNebulaEffects
		{
			Type = ContinuousEffects
			OperationalToggle = ElectronDebuffToggle
			Location = [.5, .5]
			MediaEffectsIntensityFactor = { BaseValue=.2; BuffType=ElectronNebula; BuffMode=Multiply; }
			MediaEffects
			[
				&<./Data/nebulas/electron/particles/electron_reactor_sizzle.rules>
				&<./Data/nebulas/electron/particles/electron_reactor_light.rules>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "./Data/nebulas/electron/reactor_drain.wav"
					Volume = 50%
					MaxConcurrentVolume = &Volume
					MaxConcurrent = 1
				}
			]
		}
		Graphics
		{
			Type = Graphics
			Location = [0.5, 0.5]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 1]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "reactor.png"
						Size = [1, 1]
					}
				]
			}
			NonOperationalDoodad = &OperationalDoodad
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"lights1.png"
							"lights2.png"
							"lights3.png"
							"lights4.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.1
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 1]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [1, 1]
					}
				]
			}
		}
		ReactorHum
		{
			Type = ContinuousEffects
			Location = [0.5, 0.5]
			OperationalToggle = IsOperational
			MediaEffects
			[
				: /BASE_SOUNDS/AudioInterior
				{
					Sound = "./Data/ships/terran/reactor_small/operating.wav"
					Volume = .2
					Speed = .5
					MaxConcurrent = 1
					DynamicVolume : ^/0/DynamicVolume
					{
						ExteriorVolume = .5
					}
				}
			]
		}
		BatterySprites
		{
			Type = ResourceSprites
			Location = [0.5, 0.5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			Round = Down
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [1, 1]
				}
				{
					File = "batteries2.png"
					Size = [1, 1]
				}
				{
					File = "batteries3.png"
					Size = [1, 1]
				}
				{
					File = "batteries4.png"
					Size = [1, 1]
				}
			]
		}

		DestroyedEffects
		{
			Type = DeathEffects
			Location = [0.5, 0.5]

			MediaEffects
			[
				//&<particles/reactor_explode_small.txt>
				//&<particles/reactor_explode_flash_small.txt>
				//&<particles/reactor_shockwave_small.txt>
				&<./Data/common_effects/particles/explosions/med_part_explode_debris.rules>
				&<./Data/common_effects/particles/explosions/big_part_explode.rules>
				&<./Data/common_effects/particles/explosions/big_part_explode_smoke.rules>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "./Data/ships/terran/reactor_small/destroyed.wav"
					Volume = 1
					SpeedVariation = .25
				}

				: /BASE_SHAKE
				{
					ShakeAmount = .25
					Duration = 2
				}
			]
			
			HitEffects
			[
				{
					Type = ExplosiveDamage
					TotalDamage = 14000
					Radius = 4
					Delay = .05
					ExpandDuration = .1
					ExpandStartRadius = 1
					ExpandLoss = 100%
					FireChancePerNDamage = 50%
					ImpulsePerNDamage = 10
					NDamage = 1000
					Filter
					{
						OperationalHealth = true
						StructuralHealth = false
						Friendlies = true
					}
				}
				{
					Type = ExplosiveDamage
					TotalDamage = 4000
					Radius = 4
					Delay = .1
					ExpandDuration = .05
					ExpandStartRadius = 2
					ExpandLoss = 100%
					ImpulsePerNDamage = 5
					NDamage = 1000
					Filter
					{
						OperationalHealth = false
						StructuralHealth = true
						Friendlies = true
					}
				}
			]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [0.5, 0.5]
			Layer = "indicators"
			Indicators
			[
				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1.5, 1.5]
					}
				}
				// Out of power, in nebula
				{
					Toggle = IsOperational
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1.5, 1.5]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 1]
		}
	}

	Stats
	{
		PowerGeneration = (&~/Part/Components/BatteryProducer/ToQuantity) / (&~/Part/Components/BatteryProducer/Interval) / 1000
		BatterySize = (&~/Part/Components/BatteryStorage/MaxResourcesPickUp) / 1000
		BatteryFillTime = 0
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000
	}
}
