Part : <./Data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/PowerPort"
	IconNameKey = "Parts/PowerPortIcon"
	ID = janiTNT.power_port // Part IDs  somthing something
	//OtherIDs = [juanTNT.DroneAutoChute]//Heh.
	EditorGroups = ["Production", "Power"]
	DescriptionKey = "Parts/PowerPortDesc"
	Resources
	[
		[steel, 16]
		[coil, 6]
	]
	//sus
	Size = [1, 1]
	MaxHealth = 1000
	//IsFlippable = true
	IsRotateable = true
	TypeCategories = [PowerPort, uses_power, Port_OUT]
	ReceivableBuffs : ^/0/ReceivableBuffs []
	//AllowedDoorLocations
	//[
	//	[-1, 0]
	//	//[0, 1]
	//	[1, 0]
	//]
	//IgnoreRotationForMirroredSelection = true
	EditorIcon
	{
		Texture
		{
			File = "Icon.png"
			SampleMode = Linear
		}
		Size = [32, 32]
	}
	Components : ^/0/Components
	{	
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, SelfBatteryStorage]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 3//TROLLER
		}
		
		BuffProvider
		{
			Type = CircleBuffProvider //GridBuffProvider
			BuffType = PowerportBuff
			BuffRadius = 5
			BuffAmount = 1
			OperationalToggle = IsOperational
			ShowBuffRange = true
		}

		SelfBatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 4000
		}
		BatteryStorage
		{
			Type = MultiResourceStorage
			ResourceType = battery
			ResourceStorages = [SelfBatteryStorage]
			ViaBuffs
			{
				OutgoingBuffProviders = [BuffProvider]
				ComponentID = BatteryStorage
			}
			AddMode = PrioritizeLeastResources
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Factory_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
		}

		PowerDrain
		{
			Type = ResourceConverter
			OperationalToggle = IsOperational
			FromStorage = SelfBatteryStorage
			FromQuantity = 75
			MinFromQuantityForConversion = 1
			Interval = 1
		}
		
		BaseGraphics
		{
			Type = Graphics
			Location = [0.5, 0.5]
			OperationalToggle = IsOperational
			Floor // This is needed so that armor shows up in ship ghosts.
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 1]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [1, 1]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.075
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [1, 1]
					}
				]
			}
			Walls // This is needed so that armor shows up in ship ghosts.
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "../Reactoraux/walls.png"
						Size = [1, 1]
					}
				]
			}
			Roof = &<./Data/ships/terran/corridor/corridor.rules>/Part/Components/Graphics/Roof
		}
		
		BatterySprites
		{
			Type = ResourceSprites
			Location = [.5, .5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_low"
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [1, 1]
				}
				{
					File = "batteries2.png"
					Size = [1, 1]
				}
				{
					File = "batteries3.png"
					Size = [1, 1]
				}
				{
					File = "batteries4.png"
					Size = [1, 1]
				}
			]
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/SmallPartDestroyedDry
			Location = [.5, .5]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 1]
		}
	}

	Stats
	{
		//CrewRequired = &~/Part/Components/PartCrew/Crew
		//ThrusterBuff = (&~/Part/Components/BuffProvider/BuffAmount) * 100
		PowerUsageContinuous = (&~/Part/Components/PowerDrain/FromQuantity) / (&~/Part/Components/PowerDrain/Interval) / 1000
		PowerCapacity = (&~/Part/Components/SelfBatteryStorage/MaxResources) / 1000

		RecPower = &PowerUsageContinuous
		RecCrew = (&RecPower) * 4
	}
}