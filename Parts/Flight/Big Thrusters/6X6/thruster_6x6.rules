Part : <./data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/ThrusterHuge6x6"
	IconNameKey = "Parts/ThrusterHuge6x6Icon"
	ID = janiTNT.thruster_huge_6x6 // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	EditorGroup = "Flight"
	DescriptionKey = "Parts/ThrusterHuge6x6Desc"
	Resources
	[
		[steel, 80 * 4]
		[coil2, 20 * 4]
		[tristeel, 10 * 4]
	]
	TypeCategories = [thruster, uses_power]
	Size = [6, 8]
	PhysicalRect = [0, 0, 6, 6]
	SaveRect = &PhysicalRect
	BoundingRectType = Physical
	SelectionPriority = 1
	SelectionTypeByRotation = true
	SelectionTypeID = "thrusters"
	MaxHealth = 1000 * 6^2
	ProhibitBelow = 20
	ThrusterForce = 1200 * 6^2
	ThrustIncreaseTime = 6
	ThrustRecoveryTime = 2
	FuelUsage = 50 * 6^2
	ReceivableBuffs : ^/0/ReceivableBuffs [Engine]
	BlockedTravelCells
	[
		[1, 1]
		[2, 1]
		[3, 1]
		[1, 2]
		[2, 2]
		[3, 2]
		[4, 2]
		
		[0, 3]
		[1, 3]
		[2, 3]
		[3, 3]
		[4, 3]
		[5, 3]
		
		[0, 4]
		[1, 4]
		[2, 4]
		[3, 4]
		[4, 4]
		[5, 4]
		
		[0, 5]
		[1, 5]
		[2, 5]
		[3, 5]
		[4, 5]
		[5, 5]
	]
	ForceManhattanPathInPart = true
	AllowedDoorLocations
	[
		[-1, 2]
		[-1, 1]
		[-1, 0]
		
		[0, -1]
		[1, -1]
		[2, -1]
		[3, -1]
		[4, -1]
		[5, -1]
		
		[6, 0]
		[6, 1]
		[6, 2]
	]
	EditorIcon
	{
		Texture
		{
			File = "./data/ships/terran/thruster_huge/icon.png"
			SampleMode = Linear
		}
		Size = [64*1.5, 106.66*1.5]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 18
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 8000 * 4
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		EngineBuffToggle
		{
			Type = BuffToggle
			BuffType = Engine
		}
		ToggledBatteryConsumer
		{
			Type = ToggledComponents
			Toggle = EngineBuffToggle
			Invert = true
			IncludeInBlueprints = true
			Components
			{
				BatteryConsumer
				{
					Type = ResourceConsumer
					ResourceType = battery
					Storage = BatteryStorage
					DefaultPriority = &/PRIORITIES/Thruster_Supply
					ResupplyThreshold = 1000
					OperationalToggle = PowerToggle
				}
			}
		}
		
		CornersGraphics
		{
			Type = Graphics
			Location = [3, 3]
			Floor // Top Left
			{
				Layer = "walls"
				Offset = [-2.5, -2.5]
				DamageLevels
				[
					{
						File = "../walls1.png"
						Size = [1, 1]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "walls"
				Offset = [2.5, -2.5]
				DamageLevels
				[
					{
						File = "../walls3.png"
						Size = [1, 1]
					}
				]
			}
			OperationalLighting
			{
				Layer = "walls"
				Offset = [-2.5, 2.5]
				DamageLevels
				[
					{
						File = "../walls6.png"
						Size = [1, 1]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				Offset = [2.5, 2.5]
				DamageLevels
				[
					{
						File = "../walls8.png"
						Size = [1, 1]
					}
				]
			}
			Roof
			{
				Layer = "fire"
				Offset = [-2.5, 2.5]
				DamageLevels
				[
					{
						File = "../mask1.png"
						Size = [1, 1]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "fire"
				Offset = [2.5, 2.5]
				DamageLevels
				[
					{
						File = "../mask2.png"
						Size = [1, 1]
					}
				]
			}
		}
		
		TopWall
		{
			Type = SpriteGrid
			Location = [1.5, 0.5]
			//GridSpacing = [0.25, 0.25]
			GridSize = [4, 1]
			RandomDamageLevels
			[
				[
					{
						File = "../walls2.png"
						Size = [1, 1]
					}
				]
			]
			RandomUVRotation = false
			Layer = "walls"
		}
		
		LeftWall
		{
			Type = SpriteGrid
			Location = [0.5, 1.5]
			//GridSpacing = [0.25, 0.25]
			GridSize = [1, 4]
			RandomDamageLevels
			[
				[
					{
						File = "../walls4.png"
						Size = [1, 1]
					}
				]
			]
			RandomUVRotation = false
			Layer = "walls"
		}
		
		RightWall
		{
			Type = SpriteGrid
			Location = [5.5, 1.5]
			//GridSpacing = [0.25, 0.25]
			GridSize = [1, 4]
			RandomDamageLevels
			[
				[
					{
						File = "../walls5.png"
						Size = [1, 1]
					}
				]
			]
			RandomUVRotation = false
			Layer = "walls"
		}
		
		BottomWall
		{
			Type = SpriteGrid
			Location = [1.5, 5.5]
			//GridSpacing = [0.25, 0.25]
			GridSize = [4, 1]
			RandomDamageLevels
			[
				[
					{
						File = "../walls7.png"
						Size = [1, 1]
					}
				]
			]
			RandomUVRotation = false
			Layer = "walls"
		}
		
		FloorsGraphics1
		{
			Type = Graphics
			Location = [0, 0]//use absolute coordinates in offset
			Floor // Top Left
			{
				Layer = "floors"
				Offset = [0.5, 2.5]
				DamageLevels
				[
					{
						File = "../floors/floor1.png"
						Size = [1, 1]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "floors"
				Offset = [0.5, 1.5]
				DamageLevels
				[
					{
						File = "../floors/floor15.png"
						Size = [1, 1]
					}
				]
			}
			OperationalLighting
			{
				Layer = "floors"
				Offset = [5.5, 2.5]
				DamageLevels
				[
					{
						File = "../floors/floor1.png"
						Size = [1, 1]
					}
				]
			}
			Walls
			{
				Layer = "floors"
				Offset = [5.5, 1.5]
				DamageLevels
				[
					{
						File = "../floors/floor15.png"
						Size = [1, 1]
					}
				]
			}
			Roof
			{
				Layer = "floors"
				Offset = [.5, .5]
				DamageLevels
				[
					{
						File = "../floors/floor2.png"
						Size = [1, 1]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "floors"
				Offset = [5.5, .5]
				DamageLevels
				[
					{
						File = "../floors/floor4.png"
						Size = [1, 1]
					}
				]
			}
		}
		
		FloorGridTop
		{
			Type = SpriteGrid
			Location = [1.5, 0.5]
			//GridSpacing = [0.25, 0.25]
			GridSize = [4, 1]
			RandomDamageLevels
			[
				[
					{
						File = "../floors/floor10.png"
						Size = [1, 1]
					}
				]
			]
			RandomUVRotation = false
			Layer = "floors"
		}
		
		FloorGridMid
		{
			Type = SpriteGrid
			Location = [1.5, 1.5]
			//GridSpacing = [0.25, 0.25]
			GridSize = [4, 3]
			RandomDamageLevels
			[
				[
					{
						File = "../floors/floor11.png"
						Size = [1, 1]
					}
				]
			]
			RandomUVRotation = true
			Layer = "floors"
		}
		
		FloorGridMax
		{
			Type = SpriteGrid
			Location = [.5, 3.5]
			//GridSpacing = [0.25, 0.25]
			GridSize = [6, 3]
			RandomDamageLevels
			[
				[
					{
						File = "../floors/floor11.png"
						Size = [1, 1]
					}
				]
			]
			RandomUVRotation = true
			Layer = "floors"
		}

		Graphics
		{
			Type = Graphics
			Location = [3, 3]
			OperationalToggle = IsOperational
			AnimationSpeedFactor = MainThruster
			AnimationSpeedFactorRenormalize = [0.75, 2.0]
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						AnimationFiles = &<./data/ships/terran/thruster_huge/thruster_huge.rules>/Part/Components/Graphics/OperationalDoodad/DamageLevels/0/AnimationFiles
						Size = [6, 6]
						AnimationInterval = 0.075
					}
					{
						AnimationFiles = &<./data/ships/terran/thruster_huge/thruster_huge.rules>/Part/Components/Graphics/OperationalDoodad/DamageLevels/1/AnimationFiles
						Size = [6, 6]
						AnimationInterval = 0.075
					}
					{
						AnimationFiles = &<./data/ships/terran/thruster_huge/thruster_huge.rules>/Part/Components/Graphics/OperationalDoodad/DamageLevels/2/AnimationFiles
						Size = [6, 6]
						AnimationInterval = 0.075
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "./data/ships/terran/thruster_huge/doodads_off.png"
						Size = [6, 6]
					}
					{
						File = "./data/ships/terran/thruster_huge/doodads_off_33.png"
						Size = [6, 6]
					}
					{
						File = "./data/ships/terran/thruster_huge/doodads_off_66.png"
						Size = [6, 6]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				Offset = [0, 1 * 2]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"../lights1.png"
							"../lights2.png"
						]
						Size = [6, 5 * 2]
						AnimationInterval = 0.1
					}
				]
			}
		}
		
		RoofToggle
		{
			Type = UIToggle
			ToggleID = "thruster_roof_detail"
			Default = 1
			AlwaysAllowInBuildMode = true
		}

		LowDetail
		{
			Type = ModeToggle
			Mode = RoofToggle
			OnMode = 0
		}
		
		LowComponents
		{
			Type = ToggledComponents
			Toggle = LowDetail
			IncludeInBlueprints = true
			Components
			{
				LowQualityGrid
				{
					Type = SpriteGrid
					Location = [.5, .5]
					//GridSpacing = [0.25, 0.25]
					GridSize = [6, 6]
					RandomDamageLevels
					[
						[
							{
								File = "./Data/ships/terran/corridor/roof.png"
								NormalsFile = "./Data/ships/terran/corridor/roof_normals.png"
								Size = [1, 1]
							}
							{
								File = "./Data/ships/terran/corridor/roof_33.png"
								NormalsFile = "./Data/ships/terran/corridor/roof_normals_33.png"
								Size = [1, 1]
							}
							{
								File = "./Data/ships/terran/corridor/roof_66.png"
								NormalsFile = "./Data/ships/terran/corridor/roof_normals_66.png"
								Size = [1, 1]
							}
						]
					]
					RandomUVRotation = true
					Layer = "roofs"
				}
			}
		}
		
		HighDetail
		{
			Type = ModeToggle
			Mode = RoofToggle
			OnMode = 1
		}
		
		HighComponents
		{
			Type = ToggledComponents
			Toggle = HighDetail
			IncludeInBlueprints = true
			Components
			{
				HighRoofGraphics
				{
					Type = Graphics
					Location = [3, 3]
					OperationalToggle = IsOperational
					Roof
					{
						Layer = "roofs"
						DamageLevels
						[
							{
								File = "./data/ships/terran/thruster_huge/roof.png"
								NormalsFile = "./data/ships/terran/thruster_huge/roof_normals.png"
								Size = [6, 6]
							}
							{
								File = "./data/ships/terran/thruster_huge/roof_33.png"
								NormalsFile = "./data/ships/terran/thruster_huge/roof_normals_33.png"
								Size = [6, 6]
							}
							{
								File = "./data/ships/terran/thruster_huge/roof_66.png"
								NormalsFile = "./data/ships/terran/thruster_huge/roof_normals_66.png"
								Size = [6, 6]
							}
						]
					}
					OperationalRoofDoodad
					{
						Layer = "roof_doodads"
						DamageLevels
						[
							{
								File = "./data/ships/terran/thruster_huge/roof_glows.png"
								Size = [6, 6]
							}
							{
								File = "./data/ships/terran/thruster_huge/roof_glows_33.png"
								Size = [6, 6]
							}
							{
								File = "./data/ships/terran/thruster_huge/roof_glows_66.png"
								Size = [6, 6]
							}
						]
					}
					OperationalRoofLighting
					{
						Layer = "roof_lights_fancy"
						Offset = [0, 0.5 * 2]
						DamageLevels
						[
							{
								File = "./Data/ships/common/light_blob.png"
								Size = [5 * 2, 5 * 2]
								Z = 2.50 // Controls the "height" of the light for the purposes of normal mapping.
								VertexColor = [255*1.0,116*1.0, 24*1.0]
							}
						]
					}
				}
			}
		}

		NozzleGraphics
		{
			Type = Graphics
			Location = [3, 4 * 2]
			Floor
			{
				Layer = "weapons"
				DamageLevels
				[
					{
						File = "./data/ships/terran/thruster_huge/nozzle.png"
						NormalsFile = "./data/ships/terran/thruster_huge/nozzle_normals.png"
						Size = [3 * 2, 2 * 2]
					}
					{
						File = "./data/ships/terran/thruster_huge/nozzle_33.png"
						NormalsFile = "./data/ships/terran/thruster_huge/nozzle_normals.png"
						Size = [3 * 2, 2 * 2]
					}
					{
						File = "./data/ships/terran/thruster_huge/nozzle_66.png"
						NormalsFile = "./data/ships/terran/thruster_huge/nozzle_normals.png"
						Size = [3 * 2, 2 * 2]
					}
				]
			}
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [3, 0.5 * 2]
			ResourceStorage = BatteryStorage
			Layer = "doodads_low"
			ResourceLevels
			[
				{
					File = "./data/ships/terran/thruster_huge/batteries1.png"
					Size = [1 * 2, 1 * 2]
				}
				{
					File = "./data/ships/terran/thruster_huge/batteries2.png"
					Size = [1 * 2, 1 * 2]
				}
				{
					File = "./data/ships/terran/thruster_huge/batteries3.png"
					Size = [2 * 2, 1 * 2]
				}
				{
					File = "./data/ships/terran/thruster_huge/batteries4.png"
					Size = [2 * 2, 1 * 2]
				}
				{
					File = "./data/ships/terran/thruster_huge/batteries5.png"
					Size = [2 * 2, 1 * 2]
				}
				{
					File = "./data/ships/terran/thruster_huge/batteries6.png"
					Size = [2 * 2, 1 * 2]
				}
				{
					File = "./data/ships/terran/thruster_huge/batteries7.png"
					Offset = [0 * 2, 0.5 * 2]
					Size = [3 * 2, 2 * 2]
				}
				{
					File = "./data/ships/terran/thruster_huge/batteries8.png"
					Offset = [0 * 2, 0.5 * 2]
					Size = [3 * 2, 2 * 2]
				}
			]
		}

		MainThruster
		{
			Type = Thruster
			Location = [3, 3.5 * 2]// Relative to upper-left corner of unrotated part.
			Rotation = 90d// Relative to unrotated part.
			OperationalToggle = IsOperational
			Force = &../../ThrusterForce
			MinActivation = 0
			MaxActivation = 1
			MinUncommandedActivation = &MinActivation
			MaxUncommandedActivation = &MaxActivation
			ActivationIncreaseTime = &../../ThrustIncreaseTime
			ActivationRecoveryTime = &../../ThrustRecoveryTime
			FuelStorage = BatteryStorage
			FuelUsagePerSecond = &../../FuelUsage
		}
		LateralThruster : MainThruster
		{
			Rotation = 0d
			MinActivation = -0.05
			MaxActivation = 0.05
			MinUncommandedActivation = &MinActivation
			MaxUncommandedActivation = &MaxActivation
			AllowAutoFire = false
		}

		NozzleCollider
		{
			Type = PolygonCollider
			Vertices
			[
				[2/3 * 6/3, 3 * 6/3]
				[7/3 * 6/3, 3 * 6/3]
				[8/3 * 6/3, 4 * 6/3]
				[1/3 * 6/3, 4 * 6/3]
			]
			Density = 1
		}

		ThrustEffects
		{
			Type = ContinuousEffects
			ChainedTo = MainThruster
			Location = [47/64 * 2, 0]
			FactorMediaEffectsIntensityWith = MainThruster
			MediaEffects
			[
				&<plume_6x6.rules>
				&<plume_light_6x6.rules>
				&<fire_6x6.rules>
				&<sparks_6x6.rules>
				&<smoke_6x6.rules>

				: /COMMON_SOUNDS/ThrusterRumble
				{
					Volume = .5
					Speed = .75
					MaxConcurrentVolume = 1
				}
			]
		}

		BurstTrigger
		{
			Type = ThresholdTrigger
			AmountFrom = MainThruster
			MinAmount = .5
		}

		BurstEffects
		{
			Type = TriggeredEffects
			ChainedTo = MainThruster
			Trigger = BurstTrigger
			FactorMediaEffectsIntensityWith = MainThruster
			AnchorMediaEffects = true
			MediaEffects
			[
				&<sparks_6x6.rules>

				: /COMMON_SOUNDS/ThrusterBurst
				{
					Volume = .75
					Speed = .75
					MaxConcurrentVolume = 1
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [2.5, 2.5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/BigPartDestroyed
			Location = [2.5, 2.5]
		}

		ThrusterHum
		{
			Type = ContinuousEffects
			Location = [2.5, 2.5]
			OperationalToggle = IsOperational
			MediaEffects
			[
				: /COMMON_SOUNDS/ThrusterHum
				{
					Volume = .3
					Speed = .75
					MaxConcurrentVolume = 1
				}
			]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [3, 3]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "./data/ships/terran/thruster_huge/blueprints.png"
			Size = [6, 5 * 2]
			Offset = [0, 1]//i'm going insane tbh
		}
	}

	Stats
	{
		ThrusterForce = &~/Part/ThrusterForce
		ThrusterRampUp = &~/Part/ThrustIncreaseTime
		ThrusterPowerUsage = (&~/Part/FuelUsage) / 1000
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = (&ThrusterPowerUsage) / 2
		RecCrew = (&RecPower) * 4
		EngineRoomBuffEffectiveness = 0 * 100
	}
}