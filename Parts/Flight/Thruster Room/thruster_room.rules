Part : <./data/ships/terran/base_part_terran.rules>/Part
{
	NameKey = "Parts/Thruster_Room_Small"
	IconNameKey = "Parts/Thruster_Room_SmallIcon"
	ID = janiTNT.thruster_room // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	EditorGroup = "Flight"
	DescriptionKey = "Parts/Thruster_Room_SmallDesc"
	Resources
	[
		[steel, 32]
		[coil, 10]
		[cut.tristeel, 4]
	]
	TypeCategories = [engine_room, uses_power, is_crewed]
	Size = [1, 2]
	SelectionPriority = 1
	MaxHealth = 2000
	ReceivableBuffs : ^/0/ReceivableBuffs []
	AllowedDoorLocations
	[
		[-1, 0]
		[0, -1]
		[1, 0]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [32, 64]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 3
		}
		
		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 2000
		}
		CombinedBatteryStorage
		{
			Type = MultiResourceStorage
			ResourceType = battery
			ResourceStorages = [BatteryStorage]
			ViaBuffs
			{
				OutgoingBuffProviders = [PowerDistributionBuffProvider]
				ComponentIDs = [BatteryStorage, ExtendableBatteryStorage] // ExtendableBatteryStorage is used by rocket thrusters.
			}
			AddMode = PrioritizeLeastResources
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = CombinedBatteryStorage
			DefaultPriority = &/PRIORITIES/Thruster_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
		}

		PowerDrain
		{
			Type = ResourceConverter
			OperationalToggle = IsOperational
			FromStorage = BatteryStorage
			FromQuantity = 50
			MinFromQuantityForConversion = 1
			Interval = 1
		}

		BuffProvider
		{
			Type = GridBuffProvider
			BuffType = Engine
			BuffAmount = 20%
			GridDistance = 1
			OperationalToggle = IsOperational
			AllowDiagonals = true
		}
		
		DistributePowerUIToggle
		{
			Type = UIToggle
			ToggleID = "distribute_power"
			Default = 1
		}
		DistributePowerToggle
		{
			Type = MultiToggle
			Toggles = [DistributePowerUIToggle, IsOperational]
			Mode = All
		}
		PowerDistributionBuffProvider
		{
			Type = GridBuffProvider
			BuffType = EnginePowerDistribution
			GridDistance = 1
			OperationalToggle = DistributePowerToggle
			AllowDiagonals = true
		}

		Graphics
		{
			Type = Graphics
			Location = [.5, 1]
			OperationalToggle = IsOperational
			//AnimationSpeedFactor = MainThruster
			//AnimationSpeedFactorRenormalize = [0.75, 2.0]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 2]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"dood1.png"
							"dood2.png"
							"dood3.png"
							"dood4.png"
							"dood5.png"
							"dood6.png"
							"dood7.png"
							"dood8.png"
						]
						Size = [1, 2]
						AnimationInterval = 0.075
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "dood_off.png"
						Size = [1, 2]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				//Offset = [0, .5]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"lights1.png"
							"lights2.png"
						]
						Size = [1, 2]
						AnimationInterval = 0.1
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 2]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				//Offset = [0, 0]
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_n.png"
						Size = [1, 2]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				DamageLevels
				[
					{
						File = "roof_on.png"
						Size = [1, 2]
					}
				]
			}
			NonOperationalRoofDoodad
			{
				Layer = "roof_doodads"
				DamageLevels
				[
					{
						File = "roof_off.png"
						Size = [1, 2]
					}
				]
			}
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				Offset = [0, 0.35]
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [2.0*1.25, 3.5*1.25]
						Z = 1.30 // Controls the "height" of the light for the purposes of normal mapping.
						VertexColor = [255*1.0,116*1.0, 24*1.0]
					}
				]
			}
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [.5, 1.5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_low"
			HasZeroResourceSprite = false
			ResourceLevels
			[
				{
					File = "battery1.png"
					Size = [1, 1]
				}
				{
					File = "battery2.png"
					Size = [1, 1]
				}
			]
		}
		
		EngineHum
		{
			Type = ContinuousEffects
			Location = [1.5, 1.5]
			OperationalToggle = IsOperational
			MediaEffects
			[
				: /COMMON_SOUNDS/ThrusterHum
				{
					Volume = .15
					Speed = 1
					MaxConcurrentVolume = 1
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [.5, 1]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/SmallPartDestroyed
			Location = [.5, 1]
		}
		
		/*CrewLocation1
		{
			Type = CrewLocation
			Location = [0.5, 0.4]
			Rotation = 180d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 1
			DefaultPriority = &/PRIORITIES/Thruster_Supply // Needs to be at least as high as the supply priority.
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			CrewDestinations
			[
				[0.5, 0.4]
			]
			CrewLocations
			[
				CrewLocation1
			]
			SwitchLocationInterval = [5, 10]
		}*/
		
		Indicators
		{
			Type = IndicatorSprites
			Location = [0.5, 1]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
				
				/*// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}*/
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [1, 2]
		}
	}

	Stats
	{
		//CrewRequired = &~/Part/Components/PartCrew/Crew
		ThrusterBuff = (&~/Part/Components/BuffProvider/BuffAmount) * 100
		PowerUsageContinuous = (&~/Part/Components/PowerDrain/FromQuantity) / (&~/Part/Components/PowerDrain/Interval) / 1000
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = &PowerUsageContinuous
		RecCrew = + (&RecPower) * 4
	}
}